# main.py
# RenExtract - Interface principale
# v2.5.0 - Internationalisation compl√®te et interface responsive

"""
RenExtract
Outil de traduction avanc√© pour les scripts Ren'Py
"""
# Imports Python standard
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from tkinter.scrolledtext import ScrolledText
import os
import sys
import time
import json
import datetime
import re
import subprocess

# Import Drag & Drop avec fallback
try:
    import tkinterdnd2 as dnd2  # type: ignore
    DND_AVAILABLE = True
except ImportError:
    DND_AVAILABLE = False

# Modules utilitaires
from utils.config import config_manager
from utils.logging import log_message, anonymize_path
from utils.constants import VERSION, THEMES, WINDOW_CONFIG, MESSAGES, FILE_NAMES
from ui.glossary_ui import show_glossary_manager, GlossaryDialog
from utils.i18n import i18n, _, setup_i18n_in_main, update_interface_language, smart_message, smart_success

# Gestion des fichiers
from core.file_manager import file_manager, FileOpener, TempFileManager

# Extraction & nommage
from core.extraction import (
    TextExtractor,
    get_file_base_name,
)
from utils.logging import extract_game_name

# Reconstruction
from core.reconstruction import FileReconstructor

# Validation & sauvegarde
from core.validation import (
    validate_before_extraction,
    create_safety_backup,
    validate_before_reconstruction,
)
from core.coherence_checker import check_file_coherence

# Interface utilisateur
from ui.backup_manager import show_backup_manager
from ui.interface import SaveModeDialog

# Imports du tutoriel (avec fallback de s√©curit√©)
try:
    from ui.tutorial import show_tutorial, check_first_launch
except ImportError:
    def show_tutorial():
        messagebox.showinfo("Tutoriel", "Module tutoriel non disponible")
    def check_first_launch():
        return False
        return False

# ‚úÖ CORRECTION : Variable globale pour l'instance
app_instance = None

class TraducteurRenPyPro:
    # =============================================================================
    # M√âTHODES D'INITIALISATION ET CONFIGURATION
    # =============================================================================

    def __init__(self):
        print("üöÄ Init appel√©")

        # 1. Nettoyer toute instance Tkinter existante
        import tkinter as tk
        if tk._default_root:
            try:
                tk._default_root.withdraw()
                tk._default_root.quit()
                tk._default_root.destroy()
            except:
                pass

        # 2. Cr√©er les dossiers et le fichier de log
        from utils.constants import ensure_folders_exist
        ensure_folders_exist()

        from utils.logging import initialize_log
        initialize_log()

        # 3. Cr√©er la fen√™tre principale (avec DnD si possible)
        try:
            if DND_AVAILABLE:
                self.root = dnd2.Tk()  # IMPORTANT : Utiliser dnd2.Tk() !
            else:
                self.root = tk.Tk()
        except Exception as e:
            self.root = tk.Tk()  # Fallback
        # 4. NOUVEAU : Initialiser le ThemeManager APR√àS cr√©ation de la fen√™tre
        try:
            from ui.themes import theme_manager
            theme_manager.initialize_now()
        except Exception as e:
            pass

        # ‚úÖ NOUVEAU : Initialiser l'i18n apr√®s cr√©ation de la fen√™tre
        setup_i18n_in_main(self)

        # 5. Masquer la fen√™tre temporairement pendant l'initialisation
        self.root.withdraw()

        # 6. Configuration de la fen√™tre (titre, minsize, ic√¥ne, protocole fermeture)
        self.setup_window()

        # 7. Initialisation des variables d'√©tat
        self.file_content = []
        self.original_path = None
        self.extraction_results = None
        self.last_extraction_time = 0
        self.last_reconstruction_time = 0
        self._save_mode = None

        # 8. Initialisation des widgets (√† None)
        self.label_chemin = None
        self.label_stats = None
        self.text_area = None
        self.bouton_auto_open = None
        self.bouton_validation = None
        self.bouton_theme = None
        self.frame_info = None
        self.title_label = None
        self.subtitle_label = None

        # NOUVEAU : Variables pour le mode texte
        self.text_mode = "empty"  # "file", "clipboard", "manual", "empty"
        self.source_info = None
        self.clipboard_counter = 0
        self.input_mode = "drag_drop"  # "drag_drop" ou "ctrl_v"
        self.bouton_input_mode = None
        # 9. Cr√©ation de l'interface
        self.create_interface()

        # 10. Application du th√®me
        from ui.themes import theme_manager
        theme_manager.apply_current_theme()

        # 11. Mise √† jour Drag & Drop (si text_area pr√™te)
        if self.text_area:
            try:
                self._update_drag_drop_display()
            except Exception as e:
                pass

        # 12. R√©afficher la fen√™tre une fois pr√™te
        print("‚û°Ô∏è Avant deiconify")
        self.root.deiconify()

        # 13. Centrage de la fen√™tre
        print("‚û°Ô∏è Avant center_window")
        self.center_window()

        # 14. V√©rification tutoriel premier lancement
        print("‚û°Ô∏è Avant check_tutorial")
        self.check_tutorial()

        # ‚úÖ CORRECTION : Rendre l'instance accessible globalement
        global app_instance
        app_instance = self

        # 15. Logs finaux

        log_message("INFO", f"=== D√âMARRAGE DU RenExtract v{VERSION} ===")
        log_message("INFO", "Dossiers organis√©s cr√©√©s: temporaire, sauvegardes, avertissements, logs")

    def setup_window(self):
        """Configure la fen√™tre principale"""
        self.root.title(WINDOW_CONFIG["title"])
        self.root.geometry(WINDOW_CONFIG["geometry"])
        self.root.minsize(*WINDOW_CONFIG["min_size"])
        
        # Ic√¥ne si disponible
        try:
            self.root.iconbitmap("icone.ico")
        except:
            pass
        
        # Gestion de la fermeture
        self.root.protocol("WM_DELETE_WINDOW", self.fermer_application)

    def check_imports(self):
        """V√©rifie que tous les modules n√©cessaires sont disponibles"""
        required_modules = [
            'tkinter', 'tkinterdnd2', 'core.extraction', 'core.reconstruction',
            'core.validation', 'core.file_manager', 'core.coherence_checker',
            'ui.backup_manager', 'ui.interface', 'ui.themes', 'ui.tutorial',
            'utils.constants', 'utils.config', 'utils.logging'
        ]
        
        missing = []
        for module in required_modules:
            try:
                if module == 'tkinterdnd2':
                    import tkinterdnd2
                else:
                    __import__(module)
            except ImportError:
                missing.append(module)
        
        if missing:
            print(f"‚ö†Ô∏è Modules manquants: {', '.join(missing)}")
            return False
        return True

    def center_window(self):
        """Centre la fen√™tre sur l'√©cran"""
        try:
            self.root.update_idletasks()

            width = self.root.winfo_width()
            height = self.root.winfo_height()

            # Fallback si width/height trop petits
            if width < 100 or height < 100:
                width, height = 1100, 700  # Valeur par d√©faut

            x = (self.root.winfo_screenwidth() // 2) - (width // 2)
            y = (self.root.winfo_screenheight() // 2) - (height // 2)

            self.root.geometry(f"{width}x{height}+{x}+{y}")
            print(f"‚úÖ Fen√™tre centr√©e √† {x},{y} avec taille {width}x{height}")
        except Exception as e:
            print(f"‚ùå Erreur dans center_window: {e}")
    
    def check_tutorial(self):
        """V√©rifie si le tutoriel doit √™tre affich√© - VERSION INTELLIGENTE"""
        if check_first_launch():
            log_message("INFO", "Premier lancement d√©tect√© - Syst√®me intelligent activ√©")
            # Afficher le tutoriel intelligent apr√®s un d√©lai
            self.root.after(500, self._show_first_launch_tutorial_smart)
        else:
            log_message("INFO", "Utilisateur exp√©riment√© d√©tect√© - Pas de tutoriel automatique")

    # =============================================================================
    # M√âTHODES DE GESTION DE L'INTERFACE
    # =============================================================================

    def create_interface(self):
        """Cr√©e l'interface utilisateur compl√®te"""
        # Header avec titre
        self.create_header()
        
        # Frame d'information
        self.create_info_frame()
        
        # Frame des boutons d'ouverture
        self.create_open_frame()
        
        # Frame des actions principales
        self.create_actions_frame()
        
        # Zone de contenu principal
        self.create_content_frame()
        
        # Appliquer le th√®me √† tous les widgets cr√©√©s
        self.apply_theme_to_all_widgets()

    def apply_theme_to_all_widgets(self):
        """Applique le th√®me manuellement √† tous les widgets natifs"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        def apply_to_widget_recursive(widget):
            if not widget:
                return
            
            try:
                # ‚Äî‚Äî Widgets Tkinter natifs ‚Äî‚Äî
                if isinstance(widget, tk.Frame) and not isinstance(widget, ttk.Frame):
                    widget.configure(bg=theme["bg"])
                    
                elif isinstance(widget, tk.Label) and not isinstance(widget, ttk.Label):
                    if hasattr(widget, 'cget') and widget.cget("text") in ["Pr√™t", "Ready", "Bereit"]:
                        widget.configure(bg=theme["bg"], fg=theme["fg"])
                    else:
                        widget.configure(bg=theme["bg"], fg=theme["fg"])
                        
                elif isinstance(widget, tk.Text):
                    widget.configure(
                        bg=theme["entry_bg"],
                        fg=theme["entry_fg"],
                        selectbackground=theme["select_bg"],
                        selectforeground=theme["select_fg"],
                        insertbackground=theme["entry_fg"],
                        highlightbackground=theme["bg"],
                        highlightcolor=theme["accent"]
                    )
                    
                elif isinstance(widget, tk.Button) and not isinstance(widget, ttk.Button):
                    # Forcer tous les textes des boutons en noir
                    widget.configure(fg="#000000")
                    
                # ‚úÖ NOUVEAU : Appliquer le th√®me aux fen√™tres principales
                elif isinstance(widget, (tk.Tk, tk.Toplevel)):
                    widget.configure(bg=theme["bg"])
                    
                # ‚úÖ NOUVEAU : Appliquer le th√®me √† la scrollbar
                elif isinstance(widget, tk.Scrollbar):
                    widget.configure(
                        bg=theme["bg"],
                        troughcolor=theme["bg"],
                        activebackground=theme["button_bg"],
                        highlightbackground=theme["bg"]
                    )
                    
                # Autres widgets supportant bg
                elif hasattr(widget, 'configure'):
                    try:
                        widget.configure(bg=theme.get("bg"))
                    except:
                        pass
                pass  # Ignorer les erreurs pour √©viter les crashs
            except Exception:
                pass
            # Appliquer r√©cursivement aux enfants
            try:
                for child in widget.winfo_children():
                    apply_to_widget_recursive(child)
            except:
                pass
        
        # Appliquer √† la fen√™tre principale
        apply_to_widget_recursive(self.root)

    # 2. AJOUTER ces nouvelles m√©thodes dans la classe TraducteurRenPyPro :

    def _show_first_launch_tutorial_smart(self):
        """Version INTELLIGENTE : Maximum 3 tentatives avec messages adaptatifs"""
        try:
            from ui.tutorial import show_tutorial, show_minimal_tutorial, mark_tutorial_shown
            from utils.constants import FILE_NAMES
            
            # Compter les tentatives
            attempts_file = FILE_NAMES["tutorial_flag"].replace(".flag", "_attempts.txt")
            attempts = self._get_tutorial_attempts(attempts_file)
            
            if attempts >= 3:
                # 3 tentatives d√©pass√©es ‚Üí Marquer d√©finitivement comme vu
                mark_tutorial_shown()
                log_message("INFO", "3 tentatives de tutoriel d√©pass√©es - Marquage d√©finitif")
                return
            
            # Message adapt√© selon le nombre de tentatives
            if attempts == 0:
                title = "üéâ Bienvenue dans RenExtract v2.5.0 !"
                message = "C'est votre premi√®re utilisation !\n\nüéØ D√©couvrez toutes les nouveaut√©s et fonctionnalit√©s."
                footer = "üí° Ce guide vous fera gagner du temps"
            elif attempts == 1:
                title = "üéØ Guide RenExtract"
                message = "Nous vous proposons √† nouveau le guide.\n\nüìö Architecture refactoris√©e, glossaire permanent, validation avanc√©e..."
                footer = "üí° Beaucoup de nouveaut√©s utiles √† d√©couvrir"
            else:  # attempts == 2
                title = "üìö Derni√®re proposition de guide"
                message = "Derni√®re opportunit√© pour d√©couvrir le guide.\n\nüöÄ Apr√®s cela, accessible uniquement via le bouton 'üéì Aide'."
                footer = "üí° Tentative 3/3 - Voulez-vous vraiment passer √† c√¥t√© ?"
            
            welcome_result = messagebox.askyesnocancel(
                title,
                f"{message}\n\n"
                "üéì Que souhaitez-vous faire ?\n\n"
                "‚Ä¢ Oui = üìñ Guide complet (toutes les fonctionnalit√©s)\n"
                "‚Ä¢ Non = ‚ö° Guide express (5 minutes)\n" 
                "‚Ä¢ Annuler = üîÑ Reporter au prochain lancement\n\n"
                f"{footer}"
            )
            
            if welcome_result is True:
                # Guide complet consult√© ‚Üí Marquer d√©finitivement
                show_tutorial()
                mark_tutorial_shown()
                log_message("INFO", f"Tentative {attempts + 1}/3 : Guide complet consult√© - Marqu√© d√©finitivement")
                
            elif welcome_result is False:
                # Guide express consult√© ‚Üí Marquer d√©finitivement
                show_minimal_tutorial()
                mark_tutorial_shown()
                log_message("INFO", f"Tentative {attempts + 1}/3 : Guide express consult√© - Marqu√© d√©finitivement")
                
            else:
                # Reporter ‚Üí Incr√©menter compteur
                self._increment_tutorial_attempts(attempts_file)
                self._show_help_reminder_smart(attempts + 1)
                log_message("INFO", f"Tentative {attempts + 1}/3 : Guide report√©")
                
        except Exception as e:
            log_message("WARNING", f"Erreur tutoriel intelligent: {e}")
            # Fallback : Marquer comme vu pour √©viter les boucles
            try:
                mark_tutorial_shown()
            except:
                pass

    def _get_tutorial_attempts(self, attempts_file):
        """R√©cup√®re le nombre de tentatives de tutoriel"""
        try:
            if os.path.exists(attempts_file):
                with open(attempts_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    return int(content) if content.isdigit() else 0
            return 0
        except Exception as e:
            log_message("WARNING", f"Erreur lecture tentatives: {e}")
            return 0

    def _increment_tutorial_attempts(self, attempts_file):
        """Incr√©mente le compteur de tentatives"""
        try:
            attempts = self._get_tutorial_attempts(attempts_file) + 1
            
            # S'assurer que le dossier existe
            os.makedirs(os.path.dirname(attempts_file), exist_ok=True)
            
            with open(attempts_file, 'w', encoding='utf-8') as f:
                f.write(str(attempts))
            
            log_message("INFO", f"Compteur tentatives tutoriel: {attempts}/3")
            
        except Exception as e:
            log_message("WARNING", f"Erreur incr√©ment tentatives: {e}")

    def _show_help_reminder_smart(self, attempt_number):
        """Affiche un rappel adaptatif selon le nombre de tentatives"""
        try:
            if attempt_number == 1:
                reminder_text = "üí° Guide disponible via 'üéì Aide' - Vous avez encore 2 chances au prochain lancement"
            elif attempt_number == 2:
                reminder_text = "üí° Guide disponible via 'üéì Aide' - Plus qu'une chance au prochain lancement !"
            else:  # attempt_number == 3
                reminder_text = "üí° Aide toujours disponible via le bouton 'üéì Aide' en haut √† droite"
            
            # Afficher dans la barre de statut
            if hasattr(self, 'label_stats') and self.label_stats:
                current_stats = self.label_stats.cget("text")
                self.label_stats.config(text=reminder_text)
                
                # Restaurer apr√®s 7 secondes (plus long pour √™tre s√ªr qu'il soit vu)
                self.root.after(7000, lambda: self.label_stats.config(text=current_stats))
            
        except Exception as e:
            log_message("WARNING", f"Erreur rappel intelligent: {e}")

    def create_header(self):
        """‚úÖ MODIFI√â : En-t√™te avec bouton langue"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        frame_header = tk.Frame(self.root, height=80, bg=theme["bg"])
        frame_header.pack(fill='x', padx=20, pady=(20, 10))
        frame_header.pack_propagate(False)
        self.title_label = tk.Label(
            frame_header, 
            text=_('window.title', version=VERSION),
            font=('Segoe UI Emoji', 16, 'bold'),
            bg=theme["bg"],
            fg=theme["fg"]
        )
        self.title_label.pack(side='left')
        self.subtitle_label = tk.Label(
            frame_header, 
            text=_('window.subtitle'),
            font=('Segoe UI Emoji', 10),
            bg=theme["bg"],
            fg=theme["fg"]
        )
        self.subtitle_label.pack(side='left', padx=(10, 0))
        
        # Frame pour les boutons (droite)
        frame_buttons = tk.Frame(frame_header, bg=theme["bg"])
        frame_buttons.pack(side='right')
        
        # Bouton quitter
        self.btn_quit = tk.Button(
            frame_buttons,
            text=_('buttons.quit'),
            font=('Segoe UI Emoji', 10, 'bold'),
            bg='#dc3545',
            fg='#000000',
            relief='flat',
            cursor='hand2',
            command=self.fermer_application,
            width=10,  # Largeur fixe augment√©e pour accommoder les textes plus longs
            pady=5
        )
        self.btn_quit.pack(side='right', padx=(5, 0))
        
        # Bouton langue
        self.btn_language = tk.Button(
            frame_buttons,
            text=_('buttons.language'),
            font=('Segoe UI Emoji', 10, 'bold'),
            bg='#6f42c1',
            fg='#000000',
            relief='flat',
            cursor='hand2',
            command=self.show_language_menu,
            width=12,  # Largeur fixe augment√©e pour accommoder les textes plus longs
            pady=5
        )
        self.btn_language.pack(side='right', padx=(5, 0))
        
        # Bouton th√®me (Mode Clair/Sombre)
        self.btn_theme = tk.Button(
            frame_buttons,
            text=_('buttons.theme'),
            font=('Segoe UI Emoji', 10, 'bold'),
            bg='#ffc107',
            fg='#000000',
            relief='flat',
            cursor='hand2',
            command=self.toggle_dark_mode,
            width=14,  # Largeur fixe augment√©e pour accommoder les textes plus longs
            pady=5
        )
        self.btn_theme.pack(side='right', padx=(5, 0))

    def show_language_menu(self):
        """‚úÖ NOUVEAU : Affiche le menu de s√©lection de langue"""
        try:
            import tkinter as tk
            from ui.themes import theme_manager
            
            # Cr√©er menu contextuel
            lang_menu = tk.Toplevel(self.root)
            lang_menu.title(_('buttons.language', lang=''))
            lang_menu.geometry("200x250")
            lang_menu.resizable(False, False)
            lang_menu.transient(self.root)
            
            # Centrer le menu
            lang_menu.update_idletasks()
            x = self.root.winfo_x() + self.root.winfo_width() - 220
            y = self.root.winfo_y() + 80
            lang_menu.geometry(f"+{x}+{y}")
            
            # Appliquer le th√®me
            theme = theme_manager.get_theme()
            lang_menu.configure(bg=theme["bg"])
            
            # Titre
            title_label = tk.Label(
                lang_menu,
                text="üåç " + _('buttons.language', lang='').replace('üåç ', ''),
                font=('Segoe UI Emoji', 12, 'bold'),
                bg=theme["bg"],
                fg=theme["fg"]
            )
            title_label.pack(pady=10)
            
            # Boutons de langue
            for code, name in i18n.SUPPORTED_LANGUAGES.items():
                is_current = (code == i18n.get_current_language())
                
                btn_color = theme["accent"] if is_current else theme["button_bg"]
                btn_text = f"{'‚úì ' if is_current else ''}{self._get_flag(code)} {name}"
                
                lang_btn = tk.Button(
                    lang_menu,
                    text=btn_text,
                    font=('Segoe UI Emoji', 10, 'bold' if is_current else 'normal'),
                    bg=btn_color,
                    fg='#000000',
                    relief='flat',
                    bd=0,
                    pady=8,
                    command=lambda c=code: self._change_language_and_close(c, lang_menu)
                )
                lang_btn.pack(fill='x', padx=10, pady=2)
            
            # Fermer automatiquement apr√®s 5 secondes si pas d'action
            lang_menu.after(5000, lang_menu.destroy)
            
        except Exception as e:
            log_message("ERREUR", "Erreur menu langue", e)

    def _get_flag(self, code):
        """Retourne le drapeau emoji pour un code langue"""
        flags = {
            'fr': 'üá´üá∑',
            'en': 'üá∫üá∏', 
            'es': 'üá™üá∏',
            'de': 'üá©üá™'
        }
        return flags.get(code, 'üåç')

    def _change_language_and_close(self, language_code, menu_window):
        """Change la langue et ferme le menu"""
        try:
            self.change_language(language_code)
            # D√©truire tous les widgets enfants de la fen√™tre principale
            for widget in self.root.winfo_children():
                widget.destroy()
            self.create_interface()
            from ui.themes import theme_manager
            theme_manager.apply_current_theme()
            self.center_window()
            menu_window.destroy()
        except Exception as e:
            log_message("ERREUR", f"Erreur changement langue: {e}")

    def create_info_frame(self):
        """‚úÖ MODIFI√â : Frame d'informations avec textes traduits"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        self.frame_info = tk.Frame(
            self.root, 
            bg=theme["frame_bg"], 
            relief='flat', 
            bd=1, 
            padx=8, 
            pady=10
        )
        self.frame_info.pack(fill='x', padx=20, pady=5)
        
        self.label_chemin = tk.Label(
            self.frame_info, 
            text=f"üìÑ {_('status.no_file')}", 
            font=('Segoe UI Emoji', 9, 'bold'),
            bg=theme["frame_bg"], 
            fg=theme["accent"]
        )
        self.label_chemin.pack(side='left')
        
        self.label_stats = tk.Label(
            self.frame_info, 
            text=f"üìä {_('status.ready')}", 
            font=('Segoe UI Emoji', 10),
            bg=theme["frame_bg"], 
            fg=theme["fg"]
        )
        self.label_stats.pack(side='right')

    def create_open_frame(self):
        """‚úÖ MODIFI√â : Boutons d'ouverture avec textes traduits"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        frame_open = tk.Frame(self.root, bg=theme["bg"], height=50)
        frame_open.pack(padx=20, pady=5)
        
        for col in range(4):
            frame_open.columnconfigure(col, weight=1, uniform="grp_open")
        
        # Boutons traduits avec largeur fixe augment√©e
        btn_fichier = tk.Button(
            frame_open,
            text=_('buttons.open_file'),
            font=('Segoe UI Emoji', 11),
            bg='#007bff',
            fg='#000000',
            activebackground='#0056b3',
            bd=1,
            relief='solid',
            command=self.ouvrir_fichier_unique,
            width=18  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        btn_fichier.grid(row=0, column=0, sticky="nsew", padx=5, pady=8)
        
        btn_dossier = tk.Button(
            frame_open,
            text=_('buttons.open_folder'),
            font=('Segoe UI Emoji', 11),
            bg='#007bff',
            fg='#000000',
            activebackground='#0056b3',
            bd=1,
            relief='solid',
            command=self.ouvrir_dossier,
            width=18  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        btn_dossier.grid(row=0, column=1, sticky="nsew", padx=5, pady=8)
        
        btn_sauvegardes = tk.Button(
            frame_open,
            text=_('buttons.backups'),
            font=('Segoe UI Emoji', 11),
            bg='#dc3545',
            fg='#000000',
            activebackground='#c82333',
            bd=1,
            relief='solid',
            command=self.gerer_sauvegardes,
            width=15  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        btn_sauvegardes.grid(row=0, column=2, sticky="nsew", padx=5, pady=8)
        
        btn_reinit = tk.Button(
            frame_open,
            text=_('buttons.reset'),
            font=('Segoe UI Emoji', 10),
            bg='#dc3545',
            fg='#000000',
            activebackground='#c82333',
            bd=1,
            relief='solid',
            command=self.reinitialiser,
            width=15  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        btn_reinit.grid(row=0, column=3, sticky="nsew", padx=5, pady=8)

    def create_actions_frame(self):
        """‚úÖ MODIFI√â : Actions avec textes traduits et √©tats dynamiques"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        frame_actions = tk.Frame(self.root, height=80, bg=theme["bg"])
        frame_actions.pack(padx=20, pady=5)
        
        for col in range(10):
            frame_actions.columnconfigure(col, weight=1, uniform="grp_act")
        
        # Boutons principaux avec largeur fixe augment√©e
        btn_extraire = tk.Button(
            frame_actions, text=_('buttons.extract'), font=('Segoe UI Emoji', 11),
            bg='#28a745', fg='#000000', activebackground='#1e7e34',
            bd=1, relief='solid', command=self.extraire_textes_enhanced,
            width=14  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        btn_extraire.grid(row=0, column=0, sticky="nsew", padx=5, pady=15)

        btn_reconstruire = tk.Button(
            frame_actions, text=_('buttons.reconstruct'), font=('Segoe UI Emoji', 11),
            bg='#28a745', fg='#000000', activebackground='#1e7e34',
            bd=1, relief='solid', command=self.reconstruire_fichier_enhanced,
            width=14  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        btn_reconstruire.grid(row=0, column=1, sticky="nsew", padx=5, pady=15)

        # Bouton mode d'entr√©e avec √©tat
        mode_text = "D&D" if getattr(self, 'input_mode', 'drag_drop') == "drag_drop" else "Ctrl+V"
        self.bouton_input_mode = tk.Button(
            frame_actions, text=_('buttons.input_mode', mode=mode_text), font=('Segoe UI Emoji', 10),
            bg='#17a2b8', fg='#000000', activebackground='#138496',
            bd=1, relief='solid', command=self.toggle_input_mode,
            width=12  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        self.bouton_input_mode.grid(row=0, column=2, sticky="nsew", padx=5, pady=15)

        # Bouton Glossaire
        btn_glossaire = tk.Button(
            frame_actions, text=_('buttons.glossary'), font=('Segoe UI Emoji', 10),
            bg='#6f42c1', fg='#000000', activebackground='#5a359a',
            bd=1, relief='solid', command=self.ouvrir_glossaire,
            width=12  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        btn_glossaire.grid(row=0, column=3, sticky="nsew", padx=5, pady=15)

        # Utilitaires avec √©tats dynamiques
        self._create_utility_buttons(frame_actions)

    def _create_utility_buttons(self, frame_actions):
        """Cr√©e les boutons utilitaires avec √©tats dynamiques"""
        # Bouton Auto-Open avec √©tat
        auto_status = "ON" if config_manager.is_auto_open_enabled() else "OFF"
        self.bouton_auto_open = tk.Button(
            frame_actions, text=_('buttons.auto_open', status=auto_status), 
            font=('Segoe UI Emoji', 10), bg='#ffc107', fg='#000000',
            bd=1, relief='solid', command=self.handle_toggle_auto_open,
            width=14  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        self.bouton_auto_open.grid(row=0, column=7, sticky="nsew", padx=5, pady=15)
        
        # Bouton Validation avec √©tat
        valid_status = "ON" if config_manager.is_validation_enabled() else "OFF"
        self.bouton_validation = tk.Button(
            frame_actions, text=_('buttons.validation', status=valid_status),
            font=('Segoe UI Emoji', 10), bg='#ffc107', fg='#000000',
            bd=1, relief='solid', command=self.toggle_validation,
            width=14  # Largeur fixe augment√©e pour accommoder les textes plus longs
        )
        self.bouton_validation.grid(row=0, column=8, sticky="nsew", padx=5, pady=15)
        
        # Autres boutons utilitaires
        utilitaires = [
            (_('buttons.clean'), self.nettoyer_page, 4),
            (_('buttons.temporary'), self.ouvrir_dossier_temporaire, 5),
            (_('buttons.warnings'), self.ouvrir_avertissements, 6),
            (_('buttons.help'), self.afficher_aide_intelligente, 9)
        ]
        
        for text, command, col in utilitaires:
            btn = tk.Button(frame_actions, text=text, font=('Segoe UI Emoji', 10),
                        bg='#ffc107', fg='#000000', activebackground='#e0a800',
                        bd=1, relief='solid', command=command,
                        width=12)  # Largeur fixe augment√©e pour accommoder les textes plus longs
            btn.grid(row=0, column=col, sticky="nsew", padx=5, pady=15)

    def afficher_aide_intelligente(self):
        """Affiche l'aide selon l'exp√©rience utilisateur - VERSION INTELLIGENTE"""
        try:
            # ‚úÖ MODIFI√â : Acc√©der directement au menu d'aide sans popup
            from ui.tutorial import show_help_menu
            show_help_menu()
            log_message("INFO", "Menu d'aide ouvert directement")
                
        except Exception as e:
            log_message("ERREUR", "Erreur aide intelligente", e)
            # Fallback vers le menu d'aide
            try:
                from ui.tutorial import show_help_menu
                show_help_menu()
            except:
                self.afficher_tutoriel()

    def _determine_user_type(self):
        """D√©termine le type d'utilisateur selon son anciennet√©"""
        try:
            import datetime
            from utils.constants import FILE_NAMES
            
            tutorial_flag_file = FILE_NAMES["tutorial_flag"]
            
            if not os.path.exists(tutorial_flag_file):
                return "nouveau"  # Pas de flag = tr√®s nouveau
            
            # Calculer l'anciennet√©
            creation_time = os.path.getctime(tutorial_flag_file)
            creation_date = datetime.datetime.fromtimestamp(creation_time)
            now = datetime.datetime.now()
            days_since_first_use = (now - creation_date).days
            
            if days_since_first_use <= 3:
                return "nouveau"        # 0-3 jours
            elif days_since_first_use <= 7:
                return "recent"         # 4-7 jours  
            else:
                return "experimente"    # 8+ jours
            
        except Exception as e:
            log_message("WARNING", f"Erreur d√©termination type utilisateur: {e}")
            return "experimente"  # Par d√©faut, traiter comme exp√©riment√©

    def ouvrir_glossaire(self):
        """Ouvre le gestionnaire de glossaire"""
        try:
            # Cr√©er et stocker la r√©f√©rence au dialogue
            self.glossary_dialog = GlossaryDialog(self.root, self)
            self.glossary_dialog.show()
            log_message("INFO", "Gestionnaire de glossaire ouvert")
        except Exception as e:
            log_message("ERREUR", "Erreur lors de l'ouverture du glossaire", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le glossaire:\n{str(e)}")

    def extraire_textes_enhanced(self):
        """‚úÖ NOUVEAU : Extraction avec i18n + notifications intelligentes"""
        if not self.file_content:
            # ‚úÖ R√âDUCTION POPUP : Toast au lieu de popup
            mode_info = _('buttons.input_mode', mode="D&D") if self.input_mode == "drag_drop" else _('buttons.input_mode', mode="Ctrl+V")
            self.notifications.notify(
                f"{_('status.no_file')} - {mode_info}", 
                'TOAST', 
                duration=4000
            )
            return
        
        try:
            # ‚úÖ NOTIFICATION STATUS : Barre de statut au lieu de popup
            self.notifications.notify(_('status.extracting'), 'STATUS')
            self.root.update()
            
            # Sauvegarde de s√©curit√©
            if self.original_path:
                backup_result = create_safety_backup(self.original_path)
                if not backup_result['success']:
                    log_message("WARNING", f"Sauvegarde √©chou√©e: {backup_result['error']}")
            
            # Utilisation du TextExtractor
            extractor = TextExtractor()
            extractor.load_file_content(self.file_content, self.original_path)
            results = extractor.extract_texts()
            self.extraction_results = results
            self.last_extraction_time = getattr(extractor, 'extraction_time', 0)
            self.extraction_results['extracted_count'] = getattr(extractor, 'extracted_count', 0)
            self.extraction_results['asterix_count'] = getattr(extractor, 'asterix_count', 0)
            self.extraction_results['empty_count'] = getattr(extractor, 'empty_count', 0)
            
            # Gestion de l'ouverture des fichiers
            files_to_open = [f for f in [
                self.extraction_results.get('main_file'),
                self.extraction_results.get('asterix_file'), 
                self.extraction_results.get('empty_file'),
                self.extraction_results.get('glossary_file')
            ] if f]
            
            auto_open_enabled = config_manager.is_auto_open_enabled()
            
            # ‚úÖ LOGIQUE SIMPLIFI√âE : Ouverture selon pr√©f√©rence
            if auto_open_enabled and files_to_open:
                FileOpener.open_files(files_to_open, True)
                open_status = _('extraction.files_opened_auto', count=len(files_to_open))
            elif not auto_open_enabled and files_to_open:
                # ‚úÖ R√âDUCTION POPUP : Seulement si Auto-Open d√©sactiv√© ET fichiers cr√©√©s
                result = self.notifications.notify(
                    _('extraction.confirm_open_files', 
                    extracted=extractor.extracted_count, 
                    files=len(files_to_open)), 
                    'CONFIRM'
                )
                
                if result:
                    FileOpener.open_files(files_to_open, True)
                    open_status = _('extraction.files_opened_manual', count=len(files_to_open))
                else:
                    open_status = _('extraction.files_created_not_opened', count=len(files_to_open))
            else:
                open_status = ""
            
            # ‚úÖ NOUVEAU : Message de succ√®s intelligent et traduit
            success_details = []
            
            # Textes principaux
            success_details.append(_('extraction.texts_extracted', count=extractor.extracted_count))
            
            # D√©tails optionnels
            if extractor.asterix_count > 0:
                success_details.append(_('extraction.asterix_found', count=extractor.asterix_count))
            
            if extractor.empty_count > 0:
                success_details.append(_('extraction.empty_found', count=extractor.empty_count))
            
            if hasattr(extractor, 'glossary_mapping') and len(extractor.glossary_mapping) > 0:
                success_details.append(_('extraction.glossary_protected', count=len(extractor.glossary_mapping)))
            
            if hasattr(extractor, 'ellipsis_mapping') and len(extractor.ellipsis_mapping) > 0:
                success_details.append(_('extraction.ellipsis_protected', count=len(extractor.ellipsis_mapping)))
            
            # Info sur le mode source
            if hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                success_details.append(_('extraction.source_clipboard'))
            
            # ‚úÖ MISE √Ä JOUR STATUS BAR : Informations principales
            status_msg = _('status.texts_extracted', 
                        count=extractor.extracted_count, 
                        time=self.last_extraction_time)
            
            if self.label_stats is not None:
                self.label_stats.config(text=status_msg)
            
            # ‚úÖ R√âDUCTION POPUP : Toast de succ√®s avec d√©tails
            toast_message = _('messages.success.extraction', time=self.last_extraction_time)
            if open_status:
                toast_message += f" - {open_status}"
            
            self.notifications.notify(toast_message, 'TOAST', duration=5000)
            
            # ‚úÖ POPUP D√âTAILL√âE : Seulement si demand√©e ou cas sp√©cial
            if self._should_show_detailed_extraction_info(extractor):
                detailed_message = self._build_detailed_extraction_message(
                    extractor, success_details, open_status
                )
                self.notifications.notify(detailed_message, 'MODAL', title=_('extraction.success_title'))
            
        except Exception as e:
            log_message("ERREUR", "Erreur extraction avec glossaire", e)
            # ‚úÖ ERREUR : Toujours en popup modal (critique)
            error_msg = _('extraction.error_occurred', error=str(e))
            self.notifications.notify(error_msg, 'MODAL', title=_('extraction.error_title'))
            
            if self.label_stats is not None:
                self.label_stats.config(text=f"‚ùå {_('extraction.error_status')}")

    def _should_show_detailed_extraction_info(self, extractor):
        """D√©termine si on doit afficher les d√©tails complets de l'extraction"""
        # ‚úÖ R√àGLES INTELLIGENTES : Popup d√©taill√©e seulement si :
        return (
            # Premi√®re extraction de la session
            self.last_extraction_time == 0 or
            # Beaucoup de types diff√©rents d√©tect√©s
            sum([
                1 if extractor.extracted_count > 0 else 0,
                1 if extractor.asterix_count > 0 else 0,
                1 if extractor.empty_count > 0 else 0,
                1 if hasattr(extractor, 'glossary_mapping') and len(extractor.glossary_mapping) > 0 else 0
            ]) >= 3 or
            # Mode presse-papier (moins familier)
            (hasattr(self, 'text_mode') and self.text_mode == "clipboard")
        )

    def _build_detailed_extraction_message(self, extractor, success_details, open_status):
        """Construit le message d√©taill√© d'extraction"""
        message_parts = [
            _('extraction.success_header', time=self.last_extraction_time),
            "",  # Ligne vide
            "\n".join(success_details)
        ]
        
        if open_status:
            message_parts.extend(["", open_status])
        
        return "\n".join(message_parts)

    def _fix_ellipsis_in_file(self, file_path):
        """‚úÖ SOLUTION SIMPLE : Remplace tous les [...] par ... dans le fichier final"""
        try:
            # Lire le fichier
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Compter les [...] √† corriger
            ellipsis_count = content.count('[...]')
            
            if ellipsis_count > 0:
                # Remplacer tous les [...] par ...
                corrected_content = content.replace('[...]', '...')
                
                # R√©√©crire le fichier
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(corrected_content)
                
                log_message("INFO", f"Correction [...] ‚Üí ... : {ellipsis_count} remplacements effectu√©s")
                return ellipsis_count
            
            return 0
            
        except Exception as e:
            log_message("WARNING", f"Erreur correction [...] ‚Üí ... : {e}")
            return 0

    def reconstruire_fichier_enhanced(self):
        """‚úÖ NOUVEAU : Reconstruction avec i18n + notifications intelligentes"""
        if not self.file_content or not self.original_path:
            self.notifications.notify(_('status.no_file'), 'TOAST', duration=4000)
            return
        
        try:
            # V√©rifier que les fichiers d'extraction existent
            file_base = get_file_base_name(self.original_path)
            
            if not self.extraction_results:
                self.notifications.notify(_('reconstruction.no_extraction'), 'TOAST', duration=4000)
                return
            
            # ‚úÖ VALIDATION : Popup seulement si activ√©e ET erreurs d√©tect√©es
            if config_manager.is_validation_enabled():
                extracted_count = self.extraction_results.get('extracted_count', 0)
                asterix_count = self.extraction_results.get('asterix_count', 0)
                empty_count = self.extraction_results.get('empty_count', 0)
                
                validation_result = validate_before_reconstruction(file_base, extracted_count, asterix_count, empty_count)
                
                if not validation_result['overall_valid']:
                    errors = []
                    if validation_result['main_file'] and not validation_result['main_file']['valid']:
                        errors.extend(validation_result['main_file'].get('errors', []))
                    
                    error_summary = "\n".join(f"‚Ä¢ {error}" for error in errors[:3])
                    if len(errors) > 3:
                        error_summary += f"\n... {_('validation.more_errors', count=len(errors) - 3)}"
                    
                    # ‚úÖ POPUP CRITIQUE : Validation √©chou√©e (importante)
                    full_message = _('validation.failed_message', errors=error_summary)
                    result = self.notifications.notify(full_message, 'CONFIRM', title=_('validation.failed_title'))
                    if not result:
                        return
            
            # Gestion du mode de sauvegarde
            save_mode = 'new_file'
            
            if hasattr(self, 'text_mode') and self.text_mode == "file":
                if not self._save_mode:
                    save_dialog = SaveModeDialog(self.root)
                    self._save_mode = save_dialog.show()
                    
                    if not self._save_mode:
                        return
                save_mode = self._save_mode
            elif hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                save_mode = 'new_file'
            
            # ‚úÖ NOTIFICATION STATUS : Barre de statut
            self.notifications.notify(_('status.reconstructing'), 'STATUS')
            self.root.update()
            
            start_time = time.time()
            reconstructor = FileReconstructor()
            reconstructor.load_file_content(self.file_content, self.original_path)
            result = reconstructor.reconstruct_file(save_mode)
            self.last_reconstruction_time = time.time() - start_time
            
            if result:
                # Correction des [...] ‚Üí ... 
                try:
                    ellipsis_corrections = self._fix_ellipsis_in_file(result['save_path'])
                    if ellipsis_corrections > 0:
                        log_message("INFO", f"Post-traitement : {ellipsis_corrections} [...] corrig√©s en ...")
                except Exception as e:
                    log_message("WARNING", f"Erreur correction [...]: {e}")
                
                # ‚úÖ CONTR√îLE COH√âRENCE : Notification intelligente
                if config_manager.is_validation_enabled():
                    coherence_result = check_file_coherence(result['save_path'])
                    
                    if coherence_result['issues_found'] > 0:
                        # ‚úÖ TOAST FIRST : Information discr√®te
                        warning_msg = _('coherence.issues_detected', count=coherence_result['issues_found'])
                        self.notifications.notify(warning_msg, 'TOAST', duration=6000)
                        
                        # ‚úÖ POPUP OPTIONNELLE : Seulement si l'utilisateur veut les d√©tails
                        detailed_msg = _('coherence.detailed_message', 
                                    count=coherence_result['issues_found'],
                                    warning_file=os.path.basename(coherence_result.get('warning_file', '')))
                        
                        response = self.notifications.notify(detailed_msg, 'CONFIRM', title=_('coherence.title'))
                        
                        if response and coherence_result.get('warning_file'):
                            try:
                                FileOpener.open_files([coherence_result['warning_file']], True)
                            except Exception as e:
                                log_message("WARNING", f"Impossible d'ouvrir le fichier d'avertissement", e)
                
                # ‚úÖ MISE √Ä JOUR STATUS BAR
                status_msg = _('status.reconstruction_completed', time=self.last_reconstruction_time)
                self.notifications.notify(status_msg, 'STATUS')
                
                # Ouvrir le fichier selon pr√©f√©rence
                auto_open_enabled = config_manager.is_auto_open_enabled()
                try:
                    FileOpener.open_files([result['save_path']], auto_open_enabled)
                except:
                    pass
                
                # ‚úÖ MESSAGES ADAPT√âS selon le mode et pr√©f√©rence Auto-Open
                ellipsis_info = f" - {_('reconstruction.ellipsis_fixed', count=ellipsis_corrections)}" if ellipsis_corrections > 0 else ""
                
                if hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                    if auto_open_enabled:
                        toast_msg = _('reconstruction.clipboard_success_opened', 
                                    filename=os.path.basename(result['save_path']),
                                    time=self.last_reconstruction_time) + ellipsis_info
                    else:
                        toast_msg = _('reconstruction.clipboard_success_created',
                                    filename=os.path.basename(result['save_path']),
                                    time=self.last_reconstruction_time) + ellipsis_info
                    
                    self.notifications.notify(toast_msg, 'TOAST', duration=5000)
                else:
                    # Proposer de passer au fichier suivant en mode dossier
                    if file_manager.is_folder_mode:
                        self.handle_next_file()
                    else:
                        if auto_open_enabled:
                            toast_msg = _('reconstruction.file_success_opened',
                                        filename=os.path.basename(result['save_path']),
                                        time=self.last_reconstruction_time) + ellipsis_info
                        else:
                            toast_msg = _('reconstruction.file_success_created',
                                        filename=os.path.basename(result['save_path']),
                                        time=self.last_reconstruction_time) + ellipsis_info
                        
                        self.notifications.notify(toast_msg, 'TOAST', duration=5000)
            else:
                self.notifications.notify(_('reconstruction.error_general'), 'MODAL', title=_('reconstruction.error_title'))
                if self.label_stats is not None:
                    self.label_stats.config(text=f"‚ùå {_('reconstruction.error_status')}")
                    
        except Exception as e:
            log_message("ERREUR", "Erreur lors de la reconstruction avec glossaire", e)
            error_msg = _('reconstruction.error_occurred', error=str(e))
            self.notifications.notify(error_msg, 'MODAL', title=_('reconstruction.error_title'))
            if self.label_stats is not None:
                self.label_stats.config(text=f"‚ùå {_('reconstruction.error_status')}")

    def appliquer_theme_enhanced(self):
        """Application du th√®me avec support simplifi√©"""
        try:
            from ui.themes import theme_manager
            
            current_mode = "dark" if config_manager.is_dark_mode_enabled() else "light"
            theme_manager.set_theme(current_mode)
            theme = theme_manager.get_theme()
            
            # Appliquer le th√®me √† la fen√™tre principale
            self.root.configure(bg=theme["bg"])

            # Widgets principaux
            widgets_to_update = [
                (self.title_label, theme["bg"], theme["fg"]),
                (self.subtitle_label, theme["bg"], theme["fg"]),
                (self.label_chemin, theme["frame_bg"], theme["accent"]),
                (self.label_stats, theme["frame_bg"], theme["fg"])
            ]

            for widget, bg_color, fg_color in widgets_to_update:
                if widget:
                    try:
                        widget.configure(bg=bg_color, fg=fg_color)
                    except Exception as e:
                        pass


            # Frame info
            if self.frame_info:
                try:
                    self.frame_info.configure(bg=theme["frame_bg"])
                except Exception as e:
                    pass
                    

            # Zone de texte simplifi√©e
            if self.text_area and hasattr(self.text_area, 'set_theme'):
                try:
                    self.text_area.set_theme(current_mode)
                except Exception as e:
                    pass
                    

            # Mise √† jour des couleurs de boutons
            self._update_button_text_colors(theme)

            
            
        except Exception as e:
    
            log_message("WARNING", f"Erreur application du th√®me", e)

    def create_content_frame(self):
        """Cr√©e la zone de contenu - VERSION AM√âLIOR√âE avec num√©ros de ligne"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        frame_content = tk.Frame(self.root, bg=theme["bg"])
        frame_content.pack(expand=True, fill='both', padx=20, pady=(0, 10))
        
        # ScrolledText
        self.text_area = ScrolledText(
            frame_content,
            font=('Cascadia Code', 10),
            bg=theme["entry_bg"],
            fg=theme["entry_fg"]
        )
        self.text_area.pack(expand=True, fill='both')
        # Configuration mode initial
        try:
            self.configure_input_mode()
        except Exception as e:
            pass
        
        self.root.after(500, self._initialize_text_area_display)

    def _initialize_text_area_display(self):
        """Initialise l'affichage de la zone de texte apr√®s cr√©ation compl√®te"""
        try:
            # V√©rifier que text_area existe et est pr√™te
            if not hasattr(self, 'text_area') or not self.text_area:
                return
            # V√©rifier l'√©tat de file_content (doit √™tre initialis√© dans __init__)
            if not hasattr(self, 'file_content'):
                print("‚ö†Ô∏è DEBUG - file_content pas initialis√©")
                self.file_content = []  # Initialiser par d√©faut
            print(f"üîç DEBUG - √âtat file_content: {len(self.file_content) if self.file_content else 0} √©l√©ments")
            # Mettre √† jour l'affichage
            self._update_drag_drop_display()
            print("‚úÖ DEBUG - Initialisation affichage termin√©e")
        except Exception as e:
            print(f"üí• DEBUG - Erreur initialisation affichage: {str(e)}")
            log_message("WARNING", f"Erreur initialisation affichage zone de texte", e)

    # =============================================================================
    # M√âTHODES DE GESTION DES TH√àMES
    # =============================================================================

    def toggle_dark_mode(self):
        """‚úÖ NOUVEAU : Basculement th√®me avec mise √† jour langue"""
        try:
            # 1. Met √† jour la config
            config_manager.toggle_dark_mode()

            # 2. Appliquer le th√®me imm√©diatement au theme_manager
            from ui.themes import theme_manager
            new_theme = "dark" if config_manager.is_dark_mode_enabled() else "light"
            theme_manager.set_theme(new_theme)
            theme = theme_manager.get_theme()

            # 3. Appliquer le th√®me √† la fen√™tre principale en premier
            self.root.configure(bg=theme["bg"])

            # 4. Sauvegarder l'√©tat avant de recr√©er
            current_file_content = self.file_content.copy() if self.file_content else []
            current_original_path = self.original_path
            current_extraction_results = self.extraction_results
            current_last_extraction_time = self.last_extraction_time
            current_last_reconstruction_time = self.last_reconstruction_time
            current_save_mode = self._save_mode
            current_text_mode = getattr(self, 'text_mode', 'empty')
            current_input_mode = getattr(self, 'input_mode', 'drag_drop')
            current_source_info = getattr(self, 'source_info', None)
            current_clipboard_counter = getattr(self, 'clipboard_counter', 0)

            # 5. D√©truire et recr√©er l'interface compl√®tement
            for widget in self.root.winfo_children():
                widget.destroy()

            # 6. Recr√©er l'interface avec le nouveau th√®me
            self.create_interface()

            # 7. ‚úÖ NOUVEAU : Forcer l'application du th√®me √† tous les widgets
            self.appliquer_theme_complet()

            # 8. Restaurer l'√©tat complet
            self.file_content = current_file_content
            self.original_path = current_original_path
            self.extraction_results = current_extraction_results
            self.last_extraction_time = current_last_extraction_time
            self.last_reconstruction_time = current_last_reconstruction_time
            self._save_mode = current_save_mode
            self.text_mode = current_text_mode
            self.input_mode = current_input_mode
            self.source_info = current_source_info
            self.clipboard_counter = current_clipboard_counter

            # 9. Restaurer l'affichage si un fichier √©tait charg√©
            if self.original_path and self.file_content:
                if self.label_chemin is not None:
                    self.label_chemin.config(text=f"üìÑ {self.original_path}")
                if self.text_area is not None:
                    self.text_area.delete('1.0', tk.END)
                    self.text_area.insert(tk.END, ''.join(self.file_content))
                line_count = len(self.file_content)
                if self.label_stats is not None:
                    status_msg = _('status.lines_loaded', count=line_count)
                    self.label_stats.config(text=f"üìä {status_msg}")
            
            # 10. ‚úÖ NOUVEAU : Mettre √† jour les textes traduits apr√®s changement th√®me
            update_interface_language(self)
            
            # 11. Reconfigurer le mode d'entr√©e
            try:
                self.configure_input_mode()
                self._update_drag_drop_display()
            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG - Erreur reconfig apr√®s toggle theme: {e}")
            
            # 12. ‚úÖ TOAST DISCRET : Confirmation de changement
            theme_name = _('theme.dark_mode') if config_manager.is_dark_mode_enabled() else _('theme.light_mode')
            success_msg = _('theme.changed_to', theme=theme_name)
            self.notifications.notify(success_msg, 'TOAST', duration=3000)
            
            print(f"‚úÖ DEBUG - Basculement vers th√®me {new_theme} termin√© avec succ√®s")
            
        except Exception as e:
            print(f"üí• DEBUG - Erreur toggle_dark_mode: {e}")
            log_message("ERREUR", "Erreur basculement th√®me", e)
            error_msg = _('theme.error_occurred', error=str(e))
            self.notifications.notify(error_msg, 'MODAL', title=_('theme.error_title'))

    def appliquer_theme_complet(self):
        """‚úÖ Application compl√®te du th√®me - CORRECTION ERREUR"""
        try:
            from ui.themes import theme_manager
            theme = theme_manager.get_theme()

            # Appliquer √† la fen√™tre principale
            self.root.configure(bg=theme["bg"])

            # ‚úÖ MISE √Ä JOUR SP√âCIFIQUE DES WIDGETS PRINCIPAUX
            widgets_to_update = [
                (self.title_label, "title"),
                (self.subtitle_label, "subtitle"), 
                (self.label_chemin, "path_label"),
                (self.label_stats, "stats_label")
            ]

            for widget, widget_type in widgets_to_update:
                if widget:
                    theme_manager.apply_to_widget(widget, widget_type)

            # ‚úÖ MISE √Ä JOUR DE LA ZONE DE TEXTE
            if self.text_area:
                self.text_area.configure(
                    bg=theme["entry_bg"],
                    fg=theme["entry_fg"],
                    selectbackground=theme["select_bg"],
                    selectforeground=theme["select_fg"],
                    insertbackground=theme["entry_fg"],
                    highlightbackground=theme["frame_bg"],
                    highlightcolor=theme["accent"]
                )

            # ‚úÖ MISE √Ä JOUR DES FRAMES
            if self.frame_info:
                self.frame_info.configure(bg=theme["frame_bg"])

            print(f"‚úÖ DEBUG - Th√®me {theme_manager.current_theme} appliqu√© compl√®tement")

        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur appliquer_theme_complet: {e}")

    def _update_button_text_colors(self, theme):
        """‚úÖ NOUVELLE M√âTHODE : Met √† jour les couleurs de texte des boutons"""
        try:
            # D√©finir les couleurs de texte selon le th√®me
            button_text_color = "#ffffff" if config_manager.is_dark_mode_enabled() else "#000000"
            
            # Liste des boutons avec leurs couleurs sp√©cifiques
            buttons_to_update = [
                # Boutons qui gardent toujours du texte noir
                (self.bouton_theme, "#000000"),  # Toujours noir sur jaune
                (getattr(self, 'bouton_auto_open', None), "#000000"),  # Noir sur jaune
                (getattr(self, 'bouton_validation', None), "#000000"),  # Noir sur jaune
                
                # ‚úÖ CORRECTION : Bouton input_mode TOUJOURS noir
                (getattr(self, 'bouton_input_mode', None), "#000000"),  # ‚úÖ TOUJOURS NOIR
            ]
            
            for button, text_color in buttons_to_update:
                if button:
                    try:
                        button.configure(fg=text_color)
                    except Exception as e:
                        print(f"‚ö†Ô∏è DEBUG - Erreur couleur bouton: {e}")
                        
            print(f"‚úÖ DEBUG - Couleurs boutons mises √† jour pour th√®me {theme}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur _update_button_text_colors: {e}")

    def _apply_theme_to_all_frames(self, theme):
        """Applique le th√®me √† tous les frames de l'interface"""
        try:
            # Liste de tous les frames √† th√©matiser
            frames_to_theme = []
            
            # Parcourir tous les widgets enfants de la fen√™tre principale
            for widget in self.root.winfo_children():
                if isinstance(widget, tk.Frame):
                    frames_to_theme.append(widget)
                    # Parcourir les enfants des frames
                    self._collect_frames_recursive(widget, frames_to_theme)
            
            # Appliquer le th√®me √† tous les frames trouv√©s
            for frame in frames_to_theme:
                try:
                    frame.configure(bg=theme["bg"])
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur th√®me frame: {e}")
            
            print(f"‚úÖ DEBUG - Th√®me appliqu√© √† {len(frames_to_theme)} frames")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur _apply_theme_to_all_frames: {e}")

    def _collect_frames_recursive(self, parent, frame_list):
        """Collecte r√©cursivement tous les frames enfants"""
        try:
            for child in parent.winfo_children():
                if isinstance(child, tk.Frame):
                    frame_list.append(child)
                    # R√©cursion pour les enfants
                    self._collect_frames_recursive(child, frame_list)
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur r√©cursion frames: {e}")

    # =============================================================================
    # M√âTHODES DE GESTION DES MODES D'ENTR√âE
    # =============================================================================

    def toggle_input_mode(self):
        """Bascule entre mode Drag & Drop et mode Ctrl+V avec avertissement"""
        try:
            old_mode = self.input_mode
            self.input_mode = "ctrl_v" if self.input_mode == "drag_drop" else "drag_drop"
            
            self.configure_input_mode()
            self.update_input_mode_button()
            
            # Messages adapt√©s selon la disponibilit√©
            if self.input_mode == "drag_drop" and not DND_AVAILABLE:
                messagebox.showinfo(
                    "üéØ Mode Drag & Drop",
                    "Mode: Drag & Drop (Non disponible)\n\n"
                    "‚ö†Ô∏è Votre syst√®me ne supporte pas le Drag & Drop.\n\n"
                    "üí° Utilisez les boutons bleus pour ouvrir des fichiers\n"
                    "ou basculez en mode Ctrl+V."
                )
            else:
                mode_name = "Drag & Drop" if self.input_mode == "drag_drop" else "Ctrl+V"
                mode_desc = ("Utilisez les boutons pour ouvrir des fichiers" if self.input_mode == "drag_drop" and not DND_AVAILABLE
                            else "Glissez des fichiers .rpy" if self.input_mode == "drag_drop" 
                            else "Utilisez Ctrl+V pour coller")
                
                messagebox.showinfo(f"üéØ Mode {mode_name}",
                    f"Mode: {mode_name}\nüí° {mode_desc}")
            
            log_message("INFO", f"Mode chang√©: {old_mode} ‚Üí {self.input_mode}")
            
        except Exception as e:
            log_message("ERREUR", "Erreur basculement mode", e)

    def configure_input_mode(self):
        """Configure selon le mode - VERSION UNIFI√âE"""
        try:
            if not hasattr(self, 'text_area') or not self.text_area:
                return
            
            if self.input_mode == "drag_drop":
                self.configure_drag_drop_mode()
            else:
                self.configure_ctrl_v_mode()
            
            self._update_drag_drop_display()
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur config mode: {e}")

    def configure_drag_drop_mode(self):
        """Mode D&D avec fallback intelligent"""
        try:
            # D√©sactiver Ctrl+V
            for binding in ['<Control-v>', '<Control-V>']:
                if self.text_area is not None:
                    self.text_area.unbind(binding)
                self.root.unbind(binding)
            
            # Essayer d'activer D&D seulement si disponible
            if DND_AVAILABLE:
                print("‚úÖ DEBUG - Configuration Drag & Drop (disponible)")
                self._setup_drag_drop()
            else:
                print("‚ö†Ô∏è DEBUG - Drag & Drop non disponible - Mode boutons uniquement")
                # En mode D&D sans support, on garde juste les boutons
                # et le message d'invitation explique les alternatives
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur config D&D: {e}")

    def configure_ctrl_v_mode(self):
        """Mode Ctrl+V seul"""
        try:
            # D√©sactiver D&D
            try:
                if self.text_area is not None:
                    try:
                        self.text_area.drop_target_unregister('DND_Files')  # type: ignore
                    except Exception:
                        pass
                for event in ['<<Drop>>', '<<DragEnter>>', '<<DragLeave>>']:
                    if self.text_area is not None:
                        self.text_area.unbind(event)
                    self.root.unbind(event)
            except:
                pass
            
            # Activer Ctrl+V
            for binding in ['<Control-v>', '<Control-V>']:
                if self.text_area is not None:
                    self.text_area.bind(binding, self.handle_paste)
                self.root.bind(binding, self.handle_paste)
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur config Ctrl+V: {e}")

    def handle_paste(self, event=None):
        """Colle le contenu du presse-papier"""
        try:
            print("üìã DEBUG - handle_paste appel√©")
            
            # V√©rifier qu'on est bien en mode Ctrl+V
            if hasattr(self, 'input_mode') and self.input_mode != "ctrl_v":
                messagebox.showinfo(
                    "üìã Mode incorrect",
                    f"Mode actuel: Drag & Drop\n\n"
                    f"Pour utiliser Ctrl+V, basculez en mode Ctrl+V\n"
                    f"avec le bouton violet."
                )
                return "break"
            
            # R√©cup√©rer le presse-papier
            try:
                clipboard_content = self.root.clipboard_get()
            except tk.TclError:
                messagebox.showinfo("üìã Presse-papier vide", "Le presse-papier ne contient pas de texte.")
                return "break"
            
            if not clipboard_content or not clipboard_content.strip():
                messagebox.showinfo("üìã Presse-papier vide", "Le presse-papier ne contient pas de texte.")
                return "break"
            
            # V√©rifier conflit avec contenu existant
            if self.file_content and hasattr(self, 'text_mode') and self.text_mode == "file":
                result = messagebox.askyesno(
                    "üìã Remplacer le contenu",
                    f"Un fichier est d√©j√† charg√©.\n\n"
                    f"Voulez-vous le remplacer par le contenu du presse-papier ?"
                )
                if not result:
                    return "break"
            
            # Charger le contenu
            self.load_from_clipboard(clipboard_content)
            
            log_message("INFO", f"Contenu charg√© depuis le presse-papier: {len(clipboard_content)} caract√®res")
            return "break"
            
        except Exception as e:
            log_message("ERREUR", "Erreur lors du collage", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors du collage:\n{str(e)}")
            return "break"

    def load_from_clipboard(self, content):
        """Charge du contenu depuis le presse-papier"""
        try:
            # Convertir en liste de lignes
            lines = content.splitlines(keepends=True)
            
            # G√©n√©rer un nom unique pour ce contenu
            self.clipboard_counter = getattr(self, 'clipboard_counter', 0) + 1
            timestamp = int(time.time())
            virtual_name = f"clipboard_{self.clipboard_counter}_{timestamp}.rpy"
            
            # Charger le contenu dans les variables
            self.file_content = lines
            self.original_path = virtual_name
            self.text_mode = "clipboard"
            self.source_info = {
                'type': 'clipboard',
                'length': len(content),
                'lines': len(lines),
                'timestamp': timestamp
            }
            
            # Mettre √† jour l'interface
            if self.text_area is not None:
                self.text_area.configure(state='normal')
            self.text_area.delete('1.0', tk.END)
            self.text_area.insert('1.0', content)
            
            # Mise √† jour des labels
            self.label_chemin.config(text=f"üìã Contenu du presse-papier ({len(lines)} lignes)")
            self.label_stats.config(text=f"üìä {len(lines)} lignes charg√©es depuis le presse-papier")
            
            # Message de succ√®s
            auto_status = "activ√©" if config_manager.is_auto_open_enabled() else "d√©sactiv√©"
            messagebox.showinfo(
                "üìã Contenu charg√©",
                f"Contenu du presse-papier charg√© avec succ√®s !\n\n"
                f"üìù Lignes: {len(lines)}\n"
                f"üìä Caract√®res: {len(content)}\n\n"
                f"üí° Utilisez maintenant le bouton 'Extraire'\n"
                f"üìÇ Auto-Open: {auto_status}"
            )
            
        except Exception as e:
            log_message("ERREUR", "Erreur lors du chargement depuis le presse-papier", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors du chargement:\n{str(e)}")

    def is_likely_renpy_content(self, content):
        """V√©rifie si le contenu ressemble √† du code Ren'Py"""
        try:
            # Patterns typiques Ren'Py
            renpy_indicators = [
                'translate ', 'old "', 'new "', 'label ', 'menu:', 'scene ', 'show ', 
                'hide ', 'with ', 'jump ', 'call ', 'return', '"', '# game/', '# renpy/',
                'strings:', 'TODO:', 'Translation updated'
            ]
            
            lines = content.split('\n')
            indicator_count = 0
            
            for line in lines[:20]:  # V√©rifier les 20 premi√®res lignes
                line_stripped = line.strip().lower()
                for indicator in renpy_indicators:
                    if indicator.lower() in line_stripped:
                        indicator_count += 1
                        break
            
            # Si au moins 20% des lignes ont des indicateurs Ren'Py
            return indicator_count >= max(1, len(lines[:20]) * 0.2)
            
        except Exception:
            return True  # En cas d'erreur, accepter le contenu

    def update_input_mode_button(self):
        """Met √† jour le bouton de mode avec indication de disponibilit√©"""
        try:
            if not self.bouton_input_mode:
                return
            
            if self.input_mode == "drag_drop":
                if DND_AVAILABLE:
                    self.bouton_input_mode.config(text="üéØ D&D", bg='#17a2b8')
                else:
                    # ‚úÖ INDICATION VISUELLE que D&D n'est pas disponible
                    self.bouton_input_mode.config(text="üéØ D&D ‚ùå", bg='#6c757d')
            else:
                self.bouton_input_mode.config(text="üìã Ctrl+V", bg='#6f42c1')
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur bouton: {e}")

    def _setup_drag_drop(self):
        """Configure le support du Drag & Drop - VERSION CORRIG√âE"""
        print("üîß DEBUG - D√©but _setup_drag_drop()")
        
        if not DND_AVAILABLE:
            print("‚ùå DEBUG - tkinterdnd2 non disponible")
            return

        try:
            print("üîç DEBUG - Configuration Drag & Drop...")
            
            # V√©rifier que text_area existe
            if not hasattr(self, 'text_area') or not self.text_area:
                print("‚ùå DEBUG - text_area n'existe pas")
                return
            
            # Enregistrer le drop target
            self.text_area.drop_target_register('DND_Files')
            print("‚úÖ DEBUG - drop_target_register r√©ussi")

            def on_drop(event):
                print(f"üéØ DEBUG - DROP EVENT d√©clench√©!")
                print(f"üîç DEBUG - event.data = '{event.data}'")
                try:
                    files = event.data
                    print(f"üì• DEBUG - Fichiers re√ßus: {files}")
                    
                    # Nettoyer le chemin de fichier
                    if files.startswith('{') and files.endswith('}'):
                        files = files[1:-1]  # Enlever { }
                    
                    # CORRECTION : Ligne corrig√©e
                    file_list = [f.strip() for f in files.split('} {') if f.strip()]
                    if not file_list:
                        file_list = [files.strip()]
                    
                    print(f"üìã DEBUG - Fichiers nettoy√©s: {file_list}")
                    
                    # Traiter le premier fichier .rpy trouv√©
                    for filepath in file_list:
                        cleaned_path = filepath.strip('"').strip("'")
                        print(f"üßπ DEBUG - Test fichier: '{cleaned_path}'")
                        
                        if os.path.exists(cleaned_path) and cleaned_path.lower().endswith('.rpy'):
                            print("‚úÖ DEBUG - Fichier .rpy valide trouv√©!")
                            self._handle_dropped_file(cleaned_path)
                            return 'copy'
                    
                    # Aucun fichier .rpy valide trouv√©
                    print("‚ùå DEBUG - Aucun fichier .rpy valide")
                    messagebox.showwarning(
                        "‚ö†Ô∏è Fichier non support√©",
                        "Veuillez glisser un fichier .rpy valide."
                    )
                        
                except Exception as e:
                    print(f"üí• DEBUG - Erreur dans on_drop: {e}")
                    messagebox.showerror("‚ùå Erreur Drop", f"Erreur lors du traitement:\n{str(e)}")
                
                return 'copy'

            def on_drag_enter(event):
                print("üü¢ DEBUG - DRAG ENTER")
                self.text_area.configure(highlightbackground='#28a745', highlightthickness=3)
                return 'copy'

            def on_drag_leave(event):
                print("üî¥ DEBUG - DRAG LEAVE")
                border_color = '#555555' if config_manager.is_dark_mode_enabled() else '#d0d0d0'
                self.text_area.configure(highlightbackground=border_color, highlightthickness=1)
                return 'copy'

            # Lier les √©v√©nements
            self.text_area.dnd_bind('<<Drop>>', on_drop)
            self.text_area.dnd_bind('<<DragEnter>>', on_drag_enter)
            self.text_area.dnd_bind('<<DragLeave>>', on_drag_leave)
            
            print("‚úÖ DEBUG - Drag & Drop configur√© avec succ√®s")

        except Exception as e:
            print(f"üí• DEBUG - Erreur configuration Drag & Drop: {e}")
            log_message("WARNING", f"Erreur configuration Drag & Drop: {e}")

    def _update_drag_drop_display(self):
        """Met √† jour l'affichage - VERSION AVEC FALLBACK INTELLIGENT"""
        try:
            if not hasattr(self, 'text_area') or not self.text_area:
                return
            
            if not self.file_content or self.file_content == []:
                self.text_mode = "empty"
                
                try:
                    self.text_area.configure(state='normal')
                    self.text_area.delete('1.0', tk.END)
                    
                    # Message unifi√© mode + auto-open + fallback D&D
                    invitation_text = self._get_unified_invitation_text()
                    self.text_area.insert('1.0', invitation_text)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur affichage: {e}")
            else:
                try:
                    self.text_area.configure(state='normal')
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur activation: {e}")
        
        except Exception as e:
            print(f"üí• DEBUG - Erreur _update_drag_drop_display: {e}")

    def _get_unified_invitation_text(self):
        """‚úÖ MODIFI√â : Message d'invitation traduit"""
        auto_status = "ON" if config_manager.is_auto_open_enabled() else "OFF"
        
        if self.input_mode == "drag_drop":
            if DND_AVAILABLE:
                return f"""



                            üéØ {_('buttons.input_mode', mode='D&D').upper()}
                            
                            {_('drag_drop.available')}
                            
                            üìÇ Auto-Open: {auto_status}
                            üí° {_('buttons.input_mode', mode='Ctrl+V')}



                """
            else:
                return f"""



                            üéØ {_('buttons.input_mode', mode='D&D')} ‚ùå
                            
                            {_('drag_drop.unavailable')}
                            
                            üîÑ Solutions alternatives :
                            ‚Ä¢ {_('buttons.open_file')}
                            ‚Ä¢ {_('buttons.input_mode', mode='Ctrl+V')}
                            
                            üìÇ Auto-Open: {auto_status}



                """
        else:  # ctrl_v
            return f"""



                            üìã {_('buttons.input_mode', mode='Ctrl+V').upper()}
                            
                            {_('drag_drop.ctrl_v')}
                            
                            üìÇ Auto-Open: {auto_status}
                            üí° {_('buttons.input_mode', mode='D&D')}



            """

    def reconstruire_fichier(self):
        """Reconstruit avec validation corrig√©e pour nouvelle structure"""
        if not self.file_content or not self.original_path:
            messagebox.showerror("‚ùå Erreur", MESSAGES["no_file_loaded"])
            return
        
        try:
            # V√©rifier que les fichiers d'extraction existent
            file_base = get_file_base_name(self.original_path)
            
            if not self.extraction_results:
                messagebox.showerror("‚ùå Erreur", "Effectuez d'abord l'extraction du fichier")
                return
            
            # ‚úÖ CORRECTION : Validation avec nouvelle structure
            if config_manager.is_validation_enabled():
                extracted_count = self.extraction_results.get('extracted_count', 0)
                asterix_count = self.extraction_results.get('asterix_count', 0)
                empty_count = self.extraction_results.get('empty_count', 0)
                
                # Construire les chemins avec la nouvelle structure
                from utils.constants import FOLDERS
                
                game_name = extract_game_name(self.original_path)
                temp_root = FOLDERS["temp"]
                translate_folder = os.path.join(temp_root, game_name, "fichiers_a_traduire")
                
                # Chemins des fichiers de traduction
                main_file_path = os.path.join(translate_folder, f"{file_base}.txt")
                asterix_file_path = os.path.join(translate_folder, f"{file_base}_asterix.txt") if asterix_count > 0 else None
                empty_file_path = os.path.join(translate_folder, f"{file_base}_empty.txt") if empty_count > 0 else None
                
                # Validation avec chemins complets
                from core.validation import TranslationValidator
                validator = TranslationValidator()
                validation_result = validator.validate_all_files_with_paths(
                    main_file_path, asterix_file_path, empty_file_path,
                    extracted_count, asterix_count, empty_count
                )
                
                if not validation_result['overall_valid']:
                    errors = []
                    if validation_result['main_file'] and not validation_result['main_file']['valid']:
                        errors.extend(validation_result['main_file'].get('errors', []))
                    
                    error_message = "Validation √©chou√©e:\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors[:3])
                    if len(errors) > 3:
                        error_message += f"\n... et {len(errors) - 3} autres erreurs"
                    
                    result = messagebox.askyesno("‚ö†Ô∏è Validation √©chou√©e", error_message + "\n\nContinuer quand m√™me ?")
                    if not result:
                        return
            
            # Gestion du mode de sauvegarde
            save_mode = 'new_file'  # Par d√©faut
            
            # Mode fichier classique : demander le choix
            if hasattr(self, 'text_mode') and self.text_mode == "file":
                if not self._save_mode:
                    save_dialog = SaveModeDialog(self.root)
                    self._save_mode = save_dialog.show()
                    
                    if not self._save_mode:
                        return
                save_mode = self._save_mode
            
            # Mode presse-papier : TOUJOURS nouveau fichier
            elif hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                save_mode = 'new_file'
                print("üìã DEBUG - Mode presse-papier: forcer nouveau fichier")
            
            # ‚úÖ CORRECTION : Reconstruction avec nouvelle structure
            if self.label_stats is not None:
                self.label_stats.config(text="üîß Reconstruction en cours...")
            self.root.update()
            
            start_time = time.time()
            reconstructor = FileReconstructor()
            reconstructor.load_file_content(self.file_content, self.original_path)
            result = reconstructor.reconstruct_file(save_mode)
            self.last_reconstruction_time = time.time() - start_time
            
            if result:
                # Contr√¥le de coh√©rence si validation activ√©e
                if config_manager.is_validation_enabled():
                    coherence_result = check_file_coherence(result['save_path'])
                    
                    if coherence_result['issues_found'] > 0:
                        response = messagebox.askyesnocancel(
                            "‚ö†Ô∏è Probl√®mes de coh√©rence d√©tect√©s",
                            f"{coherence_result['issues_found']} probl√®me(s) d√©tect√©(s) dans la traduction.\n\n"
                            f"Un fichier d'avertissement a √©t√© cr√©√© dans le dossier 'avertissements/{game_name}'.\n\n"
                            f"‚Ä¢ Oui = Ouvrir le fichier d'avertissement maintenant\n"
                            f"‚Ä¢ Non = Continuer sans ouvrir\n"
                            f"‚Ä¢ Annuler = Voir les d√©tails ici"
                        )
                        
                        if response is True:  # Oui - Ouvrir le fichier
                            try:
                                if coherence_result.get('warning_file'):
                                    FileOpener.open_files([coherence_result['warning_file']], True)
                            except Exception as e:
                                log_message("WARNING", f"Impossible d'ouvrir le fichier d'avertissement", e)
                        
                        elif response is None:  # Annuler - Afficher dans une fen√™tre
                            self._show_coherence_issues(coherence_result['issues'])
                
                # Logger la performance
                if hasattr(self, 'last_extractor') and self.last_extractor:
                    try:
                        from utils.logging import log_performance
                        log_performance(
                            "Traitement complet",
                            os.path.basename(self.original_path),
                            self.last_extraction_time + self.last_reconstruction_time,
                            {
                                "extraction": f"{self.last_extraction_time:.2f}s",
                                "reconstruction": f"{self.last_reconstruction_time:.2f}s",
                                "textes": self.last_extractor.extracted_count,
                                "asterisques": self.last_extractor.asterix_count,
                                "vides": self.last_extractor.empty_count
                            }
                        )
                    except Exception as e:
                        log_message("WARNING", "Impossible de logger la performance", e)
                
                # Messages de succ√®s selon le mode
                success_msg = MESSAGES["reconstruction_success"].format(time=self.last_reconstruction_time)
                if self.label_stats is not None:
                    self.label_stats.config(text=f"‚úÖ Reconstruction termin√©e | ‚è±Ô∏è {self.last_reconstruction_time:.2f}s")
                
                # Ouvrir le fichier reconstruit si demand√©
                try:
                    FileOpener.open_files([result['save_path']], config_manager.is_auto_open_enabled())
                except:
                    pass
                
                # Messages adapt√©s selon le mode
                if hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                    messagebox.showinfo("üéâ Reconstruction termin√©e", 
                        f"‚úÖ Fichier traduit cr√©√© avec succ√®s !\n\n"
                        f"üìÅ Fichier: {os.path.basename(result['save_path'])}\n"
                        f"üìã Source: Contenu du presse-papier\n"
                        f"‚è±Ô∏è Temps: {self.last_reconstruction_time:.2f}s\n\n"
                        f"üí° Le fichier a √©t√© cr√©√© automatiquement (nouveau fichier)")
                else:
                    # Proposer de passer au fichier suivant en mode dossier
                    if file_manager.is_folder_mode:
                        self.handle_next_file()
                    else:
                        messagebox.showinfo("üéâ Reconstruction termin√©e", 
                            f"‚úÖ Fichier traduit cr√©√© avec succ√®s !\n\n"
                            f"üìÅ Fichier: {os.path.basename(result['save_path'])}\n"
                            f"‚è±Ô∏è Temps: {self.last_reconstruction_time:.2f}s")
            else:
                if self.label_stats is not None:
                    self.label_stats.config(text="‚ùå Erreur lors de la reconstruction")
                messagebox.showerror("‚ùå Erreur", "Erreur lors de la reconstruction")
                
        except Exception as e:
            log_message("ERREUR", "Erreur lors de la reconstruction", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors de la reconstruction:\n{str(e)}")
            if self.label_stats is not None:
                self.label_stats.config(text="‚ùå Erreur lors de la reconstruction")

    def demander_mode_sauvegarde(self):
        """Demande le mode de sauvegarde √† l'utilisateur"""
        # R√©utiliser le mode s'il a d√©j√† √©t√© choisi
        if self._save_mode:
            return self._save_mode
        
        dialog = tk.Toplevel(self.root)
        dialog.title("üíæ Mode de Sauvegarde")
        dialog.geometry("500x300")
        dialog.resizable(False, False)
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        dialog.configure(bg=theme["bg"])
        
        result = {'mode': None}
        
        # Interface du dialog
        title_frame = tk.Frame(dialog, bg=theme["bg"])
        title_frame.pack(fill='x', padx=20, pady=20)
        
        title_label = tk.Label(title_frame, text="üíæ Choisissez le mode de sauvegarde",
                font=('Segoe UI Emoji', 14, 'bold'), bg=theme["bg"], fg=theme["fg"])
        title_label.pack()
        
        subtitle_label = tk.Label(title_frame, text="Ce choix sera m√©moris√© pour cette session",
                font=('Segoe UI Emoji', 9), bg=theme["bg"], fg=theme["fg"])
        subtitle_label.pack(pady=(5, 0))
        
        # Options
        options_frame = tk.Frame(dialog, bg=theme["bg"])
        options_frame.pack(fill='both', expand=True, padx=20)
        
        def choisir_mode(mode):
            result['mode'] = mode
            self._save_mode = mode
            dialog.destroy()
        
        # Option 1: √âcraser
        option1_frame = tk.Frame(options_frame, bg=theme["frame_bg"], relief='solid', bd=1)
        option1_frame.pack(fill='x', pady=10)
        
        btn_overwrite = tk.Button(option1_frame, text="üîÑ √âcraser le fichier original",
                 font=('Segoe UI Emoji', 11, 'bold'), bg=theme.get("warning", "#ffc107"), fg='#000000',
                 bd=0, pady=15, command=lambda: choisir_mode('overwrite'))
        btn_overwrite.pack(fill='x', padx=10, pady=10)
        
        label_overwrite = tk.Label(option1_frame, text="‚ö†Ô∏è Le fichier original sera remplac√© par la traduction",
                font=('Segoe UI Emoji', 9), bg=theme["frame_bg"], fg=theme["fg"])
        label_overwrite.pack(pady=(0, 10))
        
        # Option 2: Cr√©er nouveau fichier
        option2_frame = tk.Frame(options_frame, bg=theme["frame_bg"], relief='solid', bd=1)
        option2_frame.pack(fill='x', pady=10)
        
        btn_new_file = tk.Button(option2_frame, text="üìù Cr√©er un nouveau fichier",
                 font=('Segoe UI Emoji', 11, 'bold'), bg=theme["accent"], fg='#000000',
                 bd=0, pady=15, command=lambda: choisir_mode('new_file'))
        btn_new_file.pack(fill='x', padx=10, pady=10)
        
        label_new_file = tk.Label(option2_frame, text="‚úÖ Garde l'original et cr√©e un fichier traduit s√©par√©\nüí° L'original sera automatiquement comment√©",
                font=('Segoe UI Emoji', 9), bg=theme["frame_bg"], fg=theme["fg"], justify='left')
        label_new_file.pack(pady=(0, 10))
        
        # Bouton annuler
        btn_cancel = tk.Button(dialog, text="‚ùå Annuler", font=('Segoe UI Emoji', 10),
                 bg=theme.get("danger", "#dc3545"), fg='#000000', bd=0, pady=8,
                 command=dialog.destroy)
        btn_cancel.pack(pady=10)
        
        dialog.wait_window()
        return result['mode']

    def handle_next_file(self):
        """G√®re l'ouverture du fichier suivant en mode dossier"""
        if file_manager.is_folder_mode:
            total_time = self.last_extraction_time + self.last_reconstruction_time
            result = messagebox.askyesno(
                "üìÇ Fichier suivant",
                f"‚úÖ Fichier trait√© avec succ√®s !\n\n‚è±Ô∏è Temps de traitement :\n"
                f"‚Ä¢ Extraction: {self.last_extraction_time:.2f}s\n"
                f"‚Ä¢ Reconstruction: {self.last_reconstruction_time:.2f}s\n"
                f"‚Ä¢ Total: {total_time:.2f}s\n\n"
                f"Voulez-vous ouvrir le fichier suivant du dossier ?"
            )
            if result:
                next_info = file_manager.get_next_file()
                if next_info:
                    self.charger_fichier(next_info['file'])
                    self.update_window_title(next_info['remaining'])
                else:
                    messagebox.showinfo("‚úÖ Information", "Tous les fichiers du dossier ont √©t√© trait√©s.")
                    self.nettoyer_page()
            else:
                self.nettoyer_page()

    def ouvrir_fichier_unique(self):
        """Ouvre un fichier .rpy unique"""
        try:
            filepath = file_manager.open_single_file()
            if filepath:
                # Validation avant ouverture
                validation = validate_before_extraction(filepath)
                if not validation['is_valid']:
                    result = messagebox.askyesno(
                        "‚ö†Ô∏è Fichier suspect",
                        f"Ce fichier ne semble pas √™tre un fichier Ren'Py valide.\n\n"
                        f"Confiance: {validation['confidence']}%\n\n"
                        f"Voulez-vous continuer quand m√™me ?"
                    )
                    if not result:
                        return
                
                # Charger le fichier
                self.charger_fichier(filepath)
                self.update_window_title()
                
        except Exception as e:
            log_message("ERREUR", "Erreur lors de l'ouverture du fichier unique", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le fichier:\n{str(e)}")

    def ouvrir_dossier(self):
        """Ouvre un dossier contenant des fichiers .rpy"""
        try:
            folder_info = file_manager.open_folder()
            if folder_info:
                # Charger le premier fichier
                self.charger_fichier(folder_info['current_file'])
                self.update_window_title(folder_info['total_files'] - 1)
                
        except Exception as e:
            log_message("ERREUR", "Erreur lors de l'ouverture du dossier", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le dossier:\n{str(e)}")

    def charger_fichier(self, filepath):
        """Charge un fichier dans l'interface"""
        try:
            self.file_content = file_manager.load_file_content(filepath)
            self.original_path = filepath
            
            # D√©finir le mode
            self.text_mode = "file"
            self.source_info = {
                'type': 'file',
                'path': filepath,
                'lines': len(self.file_content),
                'size': os.path.getsize(filepath) if os.path.exists(filepath) else 0
            }
            
            self.label_chemin.config(text=f"üìÑ {filepath}")
            
            # R√©activer l'√©dition et charger le contenu
            if self.text_area is not None:
                self.text_area.configure(state='normal')
            self.text_area.delete('1.0', tk.END)
            self.text_area.insert('1.0', ''.join(self.file_content))
            
            line_count = len(self.file_content)
            self.label_stats.config(text=f"üìä {line_count} lignes charg√©es")
            
            # Mettre √† jour l'affichage
            self._update_drag_drop_display()
            
            log_message("INFO", f"Fichier charg√©: {line_count} lignes")
            
        except Exception as e:
            log_message("ERREUR", f"Impossible de charger le fichier {filepath}", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible de charger le fichier:\n{str(e)}")

    def _handle_dropped_file(self, filepath):
        """G√®re un fichier d√©pos√© par Drag & Drop"""
        try:
            print(f"üìÅ DEBUG - Traitement fichier: '{filepath}'")
            
            # V√©rifications basiques
            if not os.path.exists(filepath):
                messagebox.showerror("‚ùå Fichier introuvable", f"Le fichier n'existe pas:\n{filepath}")
                return
            
            if not filepath.lower().endswith('.rpy'):
                messagebox.showerror("‚ùå Fichier non support√©", f"Seuls les fichiers .rpy sont accept√©s.\n\nFichier: {os.path.basename(filepath)}")
                return
            
            # V√©rifier si du contenu est d√©j√† charg√©
            if self.file_content and self.file_content != []:
                result = messagebox.askyesno(
                    "üßπ Remplacer le contenu",
                    f"Du contenu est d√©j√† charg√©.\n\n"
                    f"Voulez-vous le remplacer par ce fichier :\n{os.path.basename(filepath)} ?"
                )
                if result:
                    self.nettoyer_page()
                else:
                    return
            
            # Charger le fichier
            self.charger_fichier(filepath)
            
            messagebox.showinfo(
                "üéâ Fichier charg√©",
                f"Fichier charg√© avec succ√®s par Drag & Drop !\n\n"
                f"üìÑ {os.path.basename(filepath)}\n"
                f"üìä {len(self.file_content)} lignes"
            )
            
            log_message("INFO", f"Fichier charg√© par Drag & Drop: {anonymize_path(filepath)}")
            
        except Exception as e:
            print(f"üí• DEBUG - Erreur _handle_dropped_file: {str(e)}")
            log_message("ERREUR", f"Erreur traitement fichier D&D: {filepath}", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors du chargement:\n{str(e)}")

    # =============================================================================
    # M√âTHODES UTILITAIRES
    # =============================================================================

    def gerer_sauvegardes(self):
        """Ouvre le gestionnaire de sauvegardes"""
        try:
            show_backup_manager(self.root, self.original_path)
        except Exception as e:
            log_message("ERREUR", "Erreur lors de l'ouverture du gestionnaire de sauvegardes", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le gestionnaire de sauvegardes:\n{str(e)}")

    def afficher_menu_aide(self):
        """Affiche le menu d'aide contextuel"""
        try:
            from ui.tutorial import show_help_menu
            show_help_menu()
            log_message("INFO", "Menu d'aide contextuel ouvert")
        except Exception as e:
            log_message("ERREUR", "Erreur menu d'aide", e)
            self.afficher_tutoriel()

    def afficher_nouveautes(self):
        """Affiche les nouveaut√©s de la version"""
        try:
            from ui.tutorial import show_whats_new
            show_whats_new()
            log_message("INFO", "Nouveaut√©s v2.5.0 affich√©es")
        except Exception as e:
            log_message("ERREUR", "Erreur affichage nouveaut√©s", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'afficher les nouveaut√©s:\n{str(e)}")

    def afficher_tutoriel(self):
        """Affiche le tutoriel complet (m√©thode de compatibilit√©)"""
        try:
            from ui.tutorial import show_tutorial
            show_tutorial()
            log_message("INFO", "Tutoriel complet affich√© (acc√®s direct)")
        except Exception as e:
            log_message("ERREUR", "Erreur affichage tutoriel", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'afficher le tutoriel:\n{str(e)}")

    def toggle_validation(self):
        """‚úÖ MODIFI√â : Toggle validation avec notification discr√®te"""
        try:
            new_state = config_manager.toggle_validation()
            
            # Mettre √† jour le bouton
            status = "ON" if new_state else "OFF"
            self.bouton_validation.config(text=_('buttons.validation', status=status))
            
            # ‚úÖ R√âDUCTION POPUP : Toast au lieu de popup
            message_key = 'messages.info.validation_enabled' if new_state else 'messages.info.validation_disabled'
            self.notifications.notify(_(message_key), 'TOAST')
            
            return new_state
            
        except Exception as e:
            log_message("ERREUR", "Erreur basculement validation", e)

    def handle_toggle_auto_open(self):
        """‚úÖ MODIFI√â : Toggle avec notification discr√®te"""
        try:
            new_value = config_manager.toggle_auto_open()
            
            # Mettre √† jour le bouton
            status = "ON" if new_value else "OFF"
            self.bouton_auto_open.config(text=_('buttons.auto_open', status=status))
            
            # ‚úÖ R√âDUCTION POPUP : Toast au lieu de popup
            message_key = 'messages.info.auto_open_enabled' if new_value else 'messages.info.auto_open_disabled'
            self.notifications.notify(_(message_key), 'TOAST')
            
            # Mettre √† jour l'affichage si n√©cessaire
            if hasattr(self, 'text_mode') and self.text_mode == "empty":
                try:
                    self._update_drag_drop_display()
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur mise √† jour affichage: {e}")
            
        except Exception as e:
            log_message("ERREUR", "Erreur basculement Auto-Open", e)

    def ouvrir_dossier_temporaire(self):
        """CORRIG√â : Ouvre le dossier temporaire avec recherche automatique"""
        try:
            if not self.original_path:
                messagebox.showinfo(
                    "üìÅ Dossier temporaire",
                    "Aucun fichier n'est charg√©.\n\n"
                    "Chargez d'abord un fichier pour acc√©der √† son dossier temporaire."
                )
                return
            
            # ‚úÖ CORRECTION : Utiliser la fonction d'extraction am√©lior√©e
            from utils.logging import extract_game_name
            game_name = extract_game_name(self.original_path)
            
            # ‚úÖ CORRECTION : Si pas trouv√©, chercher dans les dossiers existants
            if game_name == "Projet_Inconnu":
                from core.extraction import get_file_base_name
                file_base = get_file_base_name(self.original_path)
                
                # Chercher o√π sont r√©ellement les fichiers
                from utils.constants import FOLDERS
                temp_root = FOLDERS["temp"]
                
                for folder in os.listdir(temp_root):
                    folder_path = os.path.join(temp_root, folder)
                    if os.path.isdir(folder_path):
                        translate_folder = os.path.join(folder_path, "fichiers_a_traduire")
                        if os.path.exists(translate_folder):
                            test_file = os.path.join(translate_folder, f"{file_base}.txt")
                            if os.path.exists(test_file):
                                game_name = folder
                                break
            
            # Construire le chemin complet
            from utils.constants import FOLDERS
            temp_base = FOLDERS["temp"]
            game_folder = os.path.join(temp_base, game_name)
            
            # Cr√©er la structure si elle n'existe pas
            if not os.path.exists(game_folder):
                from utils.constants import ensure_game_structure
                ensure_game_structure(game_name)
            
            # Ouvrir le dossier
            self._open_folder(game_folder)
            
            log_message("INFO", f"Dossier temporaire ouvert: {game_name}")
            
        except Exception as e:
            log_message("ERREUR", f"Erreur ouverture dossier temporaire", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le dossier temporaire:\n{str(e)}")

    def ouvrir_avertissements(self):
        """CORRIG√â : Ouvre le dossier avertissements avec recherche automatique"""
        from utils.constants import FOLDERS
        import glob
        
        try:
            # ‚úÖ CORRECTION : M√™me syst√®me que pour temporaire
            if self.original_path:
                from utils.logging import extract_game_name
                game_name = extract_game_name(self.original_path)
                
                # Si pas trouv√©, chercher dans les dossiers existants
                if game_name == "Projet_Inconnu":
                    warnings_root = FOLDERS["warnings"]
                    if os.path.exists(warnings_root):
                        for folder in os.listdir(warnings_root):
                            folder_path = os.path.join(warnings_root, folder)
                            if os.path.isdir(folder_path):
                                # Chercher des fichiers d'avertissement
                                warning_files = glob.glob(os.path.join(folder_path, "*_avertissement.txt"))
                                if warning_files:
                                    game_name = folder
                                    break
                
                warnings_folder = os.path.join(FOLDERS["warnings"], game_name)
                folder_title = f"avertissements/{game_name}"
            else:
                warnings_folder = FOLDERS["warnings"]
                folder_title = "avertissements"
            
            # Reste du code identique...
            if not os.path.exists(warnings_folder):
                messagebox.showinfo(
                    "üìÅ Dossier avertissements",
                    f"Le dossier '{folder_title}' n'existe pas encore.\n\n"
                    f"Il sera cr√©√© automatiquement lors de la premi√®re validation\n"
                    f"qui d√©tecte des probl√®mes de coh√©rence."
                )
                return
            
            # Ouvrir le dossier
            self._open_folder(warnings_folder)
                    
        except Exception as e:
            log_message("ERREUR", f"Erreur ouverture dossier avertissements", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'acc√©der aux avertissements:\n{str(e)}")

    def _open_folder(self, folder_path):
        """Ouvre un dossier avec l'explorateur de fichiers"""
        try:
            if os.name == 'nt':  # Windows
                os.startfile(folder_path)
            elif sys.platform == 'darwin':  # macOS
                subprocess.call(['open', folder_path])
            else:  # Linux
                subprocess.call(['xdg-open', folder_path])
        except Exception as e:
            log_message("WARNING", f"Impossible d'ouvrir le dossier {folder_path}", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le dossier:\n{str(e)}")

    def _show_warning_files_list(self, warning_files, warnings_folder):
        """Affiche la liste des fichiers d'avertissement disponibles"""
        try:
            # Cr√©er une fen√™tre pour la liste
            list_window = tk.Toplevel(self.root)
            list_window.title("üìÑ Fichiers d'avertissement disponibles")
            list_window.geometry("600x400")
            
            # Centrer la fen√™tre
            list_window.update_idletasks()
            x = (list_window.winfo_screenwidth() // 2) - (list_window.winfo_width() // 2)
            y = (list_window.winfo_screenheight() // 2) - (list_window.winfo_height() // 2)
            list_window.geometry(f"+{x}+{y}")
            
            # Appliquer le th√®me
            theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
            list_window.configure(bg=theme["bg"])
            
            # En-t√™te
            header_frame = tk.Frame(list_window, bg=theme["bg"])
            header_frame.pack(fill='x', padx=10, pady=10)
            
            title_label = tk.Label(
                header_frame,
                text=f"üìÑ {len(warning_files)} fichier(s) d'avertissement trouv√©(s)",
                font=('Segoe UI Emoji', 14, 'bold'),
                bg=theme["bg"],
                fg=theme["fg"]
            )
            title_label.pack()
            
            # Liste
            list_frame = tk.Frame(list_window, bg=theme["bg"])
            list_frame.pack(fill='both', expand=True, padx=10, pady=5)
            
            # Listbox avec scrollbar
            listbox_frame = tk.Frame(list_frame, bg=theme["bg"])
            listbox_frame.pack(fill='both', expand=True)
            
            listbox = tk.Listbox(
                listbox_frame,
                font=('Segoe UI Emoji', 10),
                bg=theme["entry_bg"],
                fg=theme["entry_fg"],
                selectbackground=theme.get("select_bg", "#007acc"),
                selectforeground=theme.get("select_fg", "#ffffff")
            )
            
            scrollbar_list = tk.Scrollbar(listbox_frame, orient="vertical", command=listbox.yview)
            listbox.configure(yscrollcommand=scrollbar_list.set)
            
            listbox.pack(side="left", fill="both", expand=True)
            scrollbar_list.pack(side="right", fill="y")
            
            # Remplir la liste
            for warning_file in warning_files:
                file_name = os.path.basename(warning_file)
                # Enlever le suffixe _avertissement.txt pour plus de clart√©
                display_name = file_name.replace("_avertissement.txt", "")
                listbox.insert(tk.END, display_name)
            
            # S√©lectionner le premier par d√©faut
            if warning_files:
                listbox.selection_set(0)
            
            # Boutons
            button_frame = tk.Frame(list_window, bg=theme["bg"])
            button_frame.pack(fill='x', padx=10, pady=10)
            
            def open_selected():
                selection = listbox.curselection()
                if selection:
                    selected_file = warning_files[selection[0]]
                    FileOpener.open_files([selected_file], True)
                    list_window.destroy()
            
            def open_folder():
                self._open_folder(warnings_folder)
                list_window.destroy()
            
            btn_open_file = tk.Button(
                button_frame,
                text="üìÑ Ouvrir le fichier s√©lectionn√©",
                font=('Segoe UI Emoji', 10),
                bg=theme["accent"],
                fg="#000000",
                command=open_selected
            )
            btn_open_file.pack(side='left')
            
            btn_open_folder = tk.Button(
                button_frame,
                text="üìÅ Ouvrir le dossier",
                font=('Segoe UI Emoji', 10),
                command=open_folder
            )
            btn_open_folder.pack(side='left', padx=(10, 0))
            
            btn_close = tk.Button(
                button_frame,
                text="‚ùå Fermer",
                font=('Segoe UI Emoji', 10),
                bg=theme.get("danger", "#dc3545"),
                fg="#000000",
                command=list_window.destroy
            )
            btn_close.pack(side='right')
            
            # Double-clic pour ouvrir
            listbox.bind('<Double-Button-1>', lambda e: open_selected())
            
        except Exception as e:
            log_message("ERREUR", f"Erreur affichage liste avertissements", e)

    def _show_coherence_issues(self, issues):
        """Affiche les probl√®mes de coh√©rence dans une fen√™tre non-bloquante"""
        try:
            # Cr√©er une fen√™tre pour afficher les probl√®mes
            issues_window = tk.Toplevel(self.root)
            issues_window.title("‚ö†Ô∏è Probl√®mes de coh√©rence d√©tect√©s")
            issues_window.geometry("900x700")
            
            # Centrer la fen√™tre
            issues_window.update_idletasks()
            x = (issues_window.winfo_screenwidth() // 2) - (issues_window.winfo_width() // 2)
            y = (issues_window.winfo_screenheight() // 2) - (issues_window.winfo_height() // 2)
            issues_window.geometry(f"+{x}+{y}")
            
            # Appliquer le th√®me
            theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
            issues_window.configure(bg=theme["bg"])
            
            # En-t√™te
            header_frame = tk.Frame(issues_window, bg=theme["bg"])
            header_frame.pack(fill='x', padx=10, pady=10)
            
            title_label = tk.Label(
                header_frame,
                text="‚ö†Ô∏è Probl√®mes de coh√©rence d√©tect√©s",
                font=('Segoe UI Emoji', 16, 'bold'),
                bg=theme["bg"],
                fg=theme.get("danger", "#dc3545")
            )
            title_label.pack()
            
            count_label = tk.Label(
                header_frame,
                text=f"{len(issues)} probl√®me(s) trouv√©(s) dans la traduction",
                font=('Segoe UI Emoji', 12),
                bg=theme["bg"],
                fg=theme["fg"]
            )
            count_label.pack(pady=(5, 0))
            
            # Zone de texte avec scrollbar
            text_frame = tk.Frame(issues_window, bg=theme["bg"])
            text_frame.pack(fill='both', expand=True, padx=10, pady=5)
            
            text_area = ScrolledText(
                text_frame,
                font=('Courier New', 10),
                wrap=tk.WORD,
                bg=theme["entry_bg"],
                fg=theme["entry_fg"],
                selectbackground=theme.get("select_bg", "#007acc"),
                selectforeground=theme.get("select_fg", "#ffffff")
            )
            text_area.pack(fill='both', expand=True)
            
            # Formater et ins√©rer les probl√®mes
            content = ""
            issues_by_type = {}
            for issue in issues:
                issue_type = issue['type']
                if issue_type not in issues_by_type:
                    issues_by_type[issue_type] = []
                issues_by_type[issue_type].append(issue)
            
            for issue_type, type_issues in issues_by_type.items():
                content += f"üî∏ {self._get_issue_type_name(issue_type)}\n"
                content += "-" * 50 + "\n"
                
                for issue in type_issues:
                    content += f"Ligne {issue['line']}: {issue['description']}\n"
                    if issue.get('old_line'):
                        content += f"  OLD (ligne {issue['old_line']}): {issue.get('old_content', 'N/A')}\n"
                    if issue.get('new_content'):
                        content += f"  NEW: {issue['new_content']}\n"
                    content += "\n"
                
                content += "\n"
            
            text_area.insert('1.0', content)
            text_area.configure(state='disabled')  # Lecture seule
            
            # Boutons
            button_frame = tk.Frame(issues_window, bg=theme["bg"])
            button_frame.pack(fill='x', padx=10, pady=10)
            
            info_label = tk.Label(
                button_frame,
                text="üí° Ces probl√®mes peuvent causer des erreurs dans le jeu",
                font=('Segoe UI Emoji', 9),
                bg=theme["bg"],
                fg=theme["fg"]
            )
            info_label.pack(side='left')
            
            btn_close = tk.Button(
                button_frame,
                text="‚úÖ Compris",
                font=('Segoe UI Emoji', 10),
                bg=theme["accent"],
                fg="#000000",
                command=issues_window.destroy
            )
            btn_close.pack(side='right')
            
        except Exception as e:
            log_message("ERREUR", f"Erreur affichage probl√®mes coh√©rence", e)

    def _get_issue_type_name(self, issue_type):
        """Retourne le nom lisible d'un type de probl√®me"""
        names = {
            'TAG_MISMATCH': 'Balises {} incoh√©rentes',
            'VARIABLE_MISMATCH': 'Variables [] incoh√©rentes', 
            'PLACEHOLDER_MISMATCH': 'Placeholders () incoh√©rents',
            'MALFORMED_PLACEHOLDER': 'Placeholders malform√©s',
            'ORPHAN_TAG': 'Balises orphelines',
            'SPECIAL_CODE_MISMATCH': 'Codes sp√©ciaux incoh√©rents',
            'QUOTE_COUNT_MISMATCH': 'Nombre de guillemets diff√©rent',
            'MISSING_OLD': 'Ligne OLD manquante',
            'FILE_ERROR': 'Erreur de fichier',
            'SYSTEM_ERROR': 'Erreur syst√®me',
            'ANALYSIS_ERROR': 'Erreur d\'analyse'
        }
        return names.get(issue_type, issue_type)

    def reinitialiser(self):
        """‚úÖ NOUVEAU : R√©initialisation avec confirmation intelligente"""
        # ‚úÖ CONFIRMATION ADAPT√âE : Avec ou sans donn√©es de session
        if self.last_extraction_time > 0 or self.last_reconstruction_time > 0:
            total_time = self.last_extraction_time + self.last_reconstruction_time
            
            # ‚úÖ POPUP CRITIQUE : R√©initialisation avec donn√©es importantes
            confirm_msg = _('reset.confirm_with_data',
                        extraction_time=self.last_extraction_time,
                        reconstruction_time=self.last_reconstruction_time,
                        total_time=total_time)
            
            result = self.notifications.notify(confirm_msg, 'CONFIRM', title=_('reset.confirm_title'))
            if not result:
                return
        else:
            # ‚úÖ TOAST SIMPLE : Pas de donn√©es importantes
            confirm_msg = _('reset.confirm_simple')
            result = self.notifications.notify(confirm_msg, 'CONFIRM', title=_('reset.confirm_title'))
            if not result:
                return
        
        try:
            # ‚úÖ NETTOYAGE avec nouvelle structure
            if self.original_path:
                from utils.constants import FOLDERS
                
                game_name = extract_game_name(self.original_path)
                temp_base = FOLDERS["temp"]
                game_folder = os.path.join(temp_base, game_name)
                
                if os.path.exists(game_folder):
                    # Nettoyer le contenu du dossier du jeu
                    import shutil
                    try:
                        for item in os.listdir(game_folder):
                            item_path = os.path.join(game_folder, item)
                            if os.path.isfile(item_path):
                                os.remove(item_path)
                            elif os.path.isdir(item_path):
                                shutil.rmtree(item_path)
                        
                        # Recr√©er la structure vide
                        from utils.constants import ensure_game_structure
                        ensure_game_structure(game_name)
                        
                        log_message("INFO", f"Dossier temporaire nettoy√© pour {game_name}")
                    except Exception as e:
                        log_message("WARNING", f"Erreur lors du nettoyage du dossier temporaire", e)
            
            # R√©initialiser SEULEMENT la base de donn√©es
            file_manager.reset()  # Mode dossier, fichiers ouverts, etc.
            
            # R√©initialiser les variables de session
            self._save_mode = None
            self.extraction_results = None
            self.last_extraction_time = 0
            self.last_reconstruction_time = 0
            
            # Remettre le titre par d√©faut (enlever "Mode Dossier")
            self.root.title(_('window.title', version=VERSION))
            
            # Remettre les stats √† "Pr√™t" mais garder le chemin du fichier
            if self.label_stats is not None:
                self.label_stats.config(text=f"üìä {_('status.ready')}")
            
            # ‚úÖ TOAST DE CONFIRMATION : Succ√®s discret
            success_msg = _('reset.success_message')
            self.notifications.notify(success_msg, 'TOAST', duration=4000)
            
        except Exception as e:
            log_message("ERREUR", "Erreur lors de la r√©initialisation", e)
            error_msg = _('reset.error_occurred', error=str(e))
            self.notifications.notify(error_msg, 'MODAL', title=_('reset.error_title'))

    def create_game_structure_on_demand(self, game_name):
        """Cr√©e la structure pour un jeu sp√©cifique √† la demande"""
        try:
            from utils.constants import FOLDERS
            
            # Structure par jeu
            game_structure = [
                # Temporaires
                os.path.join(FOLDERS["temp"], game_name),
                os.path.join(FOLDERS["temp"], game_name, "fichiers_a_traduire"),
                os.path.join(FOLDERS["temp"], game_name, "fichiers_a_ne_pas_traduire"),
                
                # Sauvegardes
                os.path.join(FOLDERS["backup"], game_name),
                
                # Avertissements
                os.path.join(FOLDERS["warnings"], game_name)
            ]
            
            created_folders = []
            for folder in game_structure:
                if not os.path.exists(folder):
                    os.makedirs(folder, exist_ok=True)
                    created_folders.append(folder)
            
            if created_folders:
                print(f"‚úÖ Structure cr√©√©e pour '{game_name}':")
                print(f"üìÅ temporaires/{game_name}/")
                print(f"  ‚îú‚îÄ‚îÄ üìÅ fichiers_a_traduire/")
                print(f"  ‚îú‚îÄ‚îÄ üìÅ fichiers_a_ne_pas_traduire/")
                print(f"üìÅ sauvegardes/{game_name}/")
                print(f"üìÅ avertissements/{game_name}/")
            
            return True
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation structure jeu '{game_name}': {e}")
            return False

    def nettoyer_page(self):
        """‚úÖ NOUVEAU : Nettoyage avec confirmation intelligente"""
        # ‚úÖ CONFIRMATION ADAPT√âE : Avec ou sans donn√©es de session
        if self.last_extraction_time > 0 or self.last_reconstruction_time > 0:
            total_time = self.last_extraction_time + self.last_reconstruction_time
            
            # ‚úÖ POPUP CRITIQUE : Nettoyage avec donn√©es importantes
            confirm_msg = _('clean.confirm_with_data',
                        extraction_time=self.last_extraction_time,
                        reconstruction_time=self.last_reconstruction_time,
                        total_time=total_time)
            
            result = self.notifications.notify(confirm_msg, 'CONFIRM', title=_('clean.confirm_title'))
            if not result:
                return
        else:
            # ‚úÖ TOAST SIMPLE : Pas de donn√©es importantes  
            confirm_msg = _('clean.confirm_simple')
            result = self.notifications.notify(confirm_msg, 'CONFIRM', title=_('clean.confirm_title'))
            if not result:
                return
        
        try:
            # Nettoyer les donn√©es
            self.file_content = []
            self.original_path = None
            self.extraction_results = None
            
            # R√©initialiser le mode texte
            if hasattr(self, 'text_mode'):
                self.text_mode = "empty"
            if hasattr(self, 'source_info'):
                self.source_info = None
            
            # Nettoyer l'interface
            self.text_area.delete('1.0', tk.END)
            self.label_chemin.config(text=f"üìÑ {_('status.no_file')}")
            self.label_stats.config(text=f"üìä {_('status.ready')}")
            
            # Restaurer le message d'invitation Drag & Drop
            try:
                self._update_drag_drop_display()
                log_message("INFO", "Interface nettoy√©e et message Drag & Drop restaur√©")
            except Exception as e:
                log_message("WARNING", f"Erreur restauration message D&D: {e}")
            
            # ‚úÖ TOAST DE CONFIRMATION : Succ√®s discret
            success_msg = _('clean.success_message')
            self.notifications.notify(success_msg, 'TOAST', duration=3000)
            
        except Exception as e:
            log_message("ERREUR", "Erreur lors du nettoyage", e)
            error_msg = _('clean.error_occurred', error=str(e))
            self.notifications.notify(error_msg, 'MODAL', title=_('clean.error_title'))

    def update_window_title(self, remaining_files=None):
        """Met √† jour le titre de la fen√™tre"""
        base_title = WINDOW_CONFIG["title"]
        
        if file_manager.is_folder_mode and remaining_files is not None:
            self.root.title(f"{base_title} - Mode Dossier ({remaining_files} fichiers restants)")
        else:
            self.root.title(base_title)

    def fermer_application(self):
        """Ferme proprement l'application"""
        try:
            # Nettoyer les r√©f√©rences aux dialogues
            if hasattr(self, 'glossary_dialog') and self.glossary_dialog is not None:
                self.glossary_dialog._safe_destroy()
                self.glossary_dialog = None
            
            # Fermer la fen√™tre principale de mani√®re s√©curis√©e
            if self.root is not None:
                try:
                    if self.root.winfo_exists():
                        self.root.quit()
                        self.root.destroy()
                except Exception:
                    pass
                self.root = None
            
            log_message("INFO", "Application ferm√©e proprement")
            
        except Exception as e:
            log_message("ERREUR", "Erreur lors de la fermeture", e)
        finally:
            # Forcer la sortie
            import sys
            sys.exit(0)

    def run(self):
        """Lance la boucle principale de l'application"""
        print("üåÄ Lancement de mainloop()")
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            print("üõë Fermeture manuelle (Ctrl+C)")

    def test_compatibility(self):
        """Teste la compatibilit√© D&D + Ctrl+V"""
        print("\nüß™ TEST DE COMPATIBILIT√â")
        print("1. Essayez Drag & Drop d'un fichier .rpy")
        print("2. Puis Ctrl+V avec du contenu dans le presse-papier")
        print("3. Les deux doivent fonctionner sans conflit")
        print("4. V√©rifiez que Ctrl+V fonctionne m√™me avec le message d'invitation\n")

    def update_button_texts(self):
        """Met √† jour dynamiquement les textes des boutons principaux selon la langue courante"""
        # Header
        self.bouton_quitter.config(text=_('buttons.quit'))
        self.bouton_language.config(text=_('buttons.language', lang=i18n.get_language_name()))
        theme_text = _('buttons.theme') if config_manager.is_dark_mode_enabled() else _('buttons.theme_dark')
        self.bouton_theme.config(text=theme_text)
        self.title_label.config(text=_('window.title', version=VERSION))
        self.subtitle_label.config(text=_('window.subtitle'))
        # Actions principales (si elles existent)
        if hasattr(self, 'bouton_input_mode') and self.bouton_input_mode:
            mode_text = "D&D" if getattr(self, 'input_mode', 'drag_drop') == "drag_drop" else "Ctrl+V"
            self.bouton_input_mode.config(text=_('buttons.input_mode', mode=mode_text))
        if hasattr(self, 'bouton_auto_open') and self.bouton_auto_open:
            status = "ON" if config_manager.is_auto_open_enabled() else "OFF"
            self.bouton_auto_open.config(text=_('buttons.auto_open', status=status))
        if hasattr(self, 'bouton_validation') and self.bouton_validation:
            status = "ON" if config_manager.is_validation_enabled() else "OFF"
            self.bouton_validation.config(text=_('buttons.validation', status=status))
        if hasattr(self, 'bouton_theme') and self.bouton_theme:
            theme_text = _('buttons.theme') if config_manager.is_dark_mode_enabled() else _('buttons.theme_dark')
            self.bouton_theme.config(text=theme_text)
        # Boutons d'ouverture (si existants)
        if hasattr(self, 'btn_fichier') and self.btn_fichier:
            self.btn_fichier.config(text=_('buttons.open_file'))
        if hasattr(self, 'btn_dossier') and self.btn_dossier:
            self.btn_dossier.config(text=_('buttons.open_folder'))
        if hasattr(self, 'btn_glossaire') and self.btn_glossaire:
            self.btn_glossaire.config(text=_('buttons.glossary'))
        if hasattr(self, 'btn_sauvegardes') and self.btn_sauvegardes:
            self.btn_sauvegardes.config(text=_('buttons.backups'))
        # ...ajouter ici d'autres boutons √† traduire si besoin

# =============================================================================
# FONCTIONS UTILITAIRES GLOBALES
# =============================================================================

def get_current_game_name():
    """R√©cup√®re le nom du jeu actuellement charg√©"""
    global app_instance
    if app_instance and app_instance.original_path:
        return extract_game_name(app_instance.original_path)
    return "Projet_Inconnu"

def main():
    """Fonction principale"""
    print("üé¨ Lancement de main()")
    app = TraducteurRenPyPro()
    print("‚úÖ Classe instanci√©e")
    app.run()

if __name__ == "__main__":
    try:
        print("üöÄ D√©marrage du RenExtract...")
        main()
    except Exception as e:
        print(f"‚ùå ERREUR au d√©marrage: {e}")
        import traceback
        print("üîç D√©tails complets:")
        traceback.print_exc()
        input("Appuyez sur Entr√©e pour fermer...")