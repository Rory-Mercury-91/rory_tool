# main.py
# Traducteur Ren'Py Pro - Interface principale
# v2.4.0 - Corrections finales des erreurs

"""
Traducteur Ren'Py Pro
Outil de traduction avanc√© pour les scripts Ren'Py
"""
# Imports Python standard
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from tkinter.scrolledtext import ScrolledText
import os
import sys
import time
import json
import datetime
import re
import subprocess

# Import Drag & Drop avec fallback
try:
    import tkinterdnd2 as dnd2
    DND_AVAILABLE = True
    print("‚úÖ DEBUG - tkinterdnd2 import√© avec succ√®s")
except ImportError:
    DND_AVAILABLE = False
    print("‚ùå DEBUG - tkinterdnd2 non disponible")

# Modules utilitaires
from utils.config import config_manager
from utils.logging import log_message, anonymize_path
from utils.constants import VERSION, THEMES, WINDOW_CONFIG, MESSAGES, FILE_NAMES
from ui.glossary_ui import show_glossary_manager

# Gestion des fichiers
from core.file_manager import file_manager, FileOpener, TempFileManager

# Extraction & nommage
from core.extraction import (
    TextExtractor,
    get_file_base_name,
)
from utils.logging import extract_game_name

# ‚úÖ CORRECTION : Import des modules enhanced
from core.extraction_enhanced import EnhancedTextExtractor, extraire_textes_enhanced
from core.reconstruction_enhanced import EnhancedFileReconstructor, reconstruire_fichier_enhanced

# Reconstruction
from core.reconstruction import FileReconstructor

# Validation & sauvegarde
from core.validation import (
    validate_before_extraction,
    create_safety_backup,
    validate_before_reconstruction,
)
from core.coherence_checker import check_file_coherence

# Interface utilisateur
from ui.backup_manager import show_backup_manager
from ui.interface import SaveModeDialog

# Imports du tutoriel (avec fallback de s√©curit√©)
try:
    from ui.tutorial import show_tutorial, check_first_launch
except ImportError:
    def show_tutorial():
        messagebox.showinfo("Tutoriel", "Module tutoriel non disponible")
    def check_first_launch():
        return False

# ‚úÖ CORRECTION : Variable globale pour l'instance
app_instance = None

class TraducteurRenPyPro:
    # =============================================================================
    # M√âTHODES D'INITIALISATION ET CONFIGURATION
    # =============================================================================

    def __init__(self):
        print("üöÄ Init appel√©")

        # 1. Nettoyer toute instance Tkinter existante
        import tkinter as tk
        if tk._default_root:
            try:
                tk._default_root.withdraw()
                tk._default_root.quit()
                tk._default_root.destroy()
            except:
                pass

        # 2. Cr√©er les dossiers et le fichier de log
        from utils.constants import ensure_folders_exist
        ensure_folders_exist()

        from utils.logging import initialize_log
        initialize_log()

        # 3. Cr√©er la fen√™tre principale (avec DnD si possible)
        try:
            if DND_AVAILABLE:
                self.root = dnd2.Tk()  # IMPORTANT : Utiliser dnd2.Tk() !
                print("‚úÖ DEBUG - Fen√™tre dnd2.Tk() cr√©√©e")
            else:
                self.root = tk.Tk()
                print("‚úÖ DEBUG - Fen√™tre tk.Tk() cr√©√©e")
        except Exception as e:
            print(f"‚ùå DEBUG - Erreur cr√©ation fen√™tre: {e}")
            self.root = tk.Tk()  # Fallback
        # 4. NOUVEAU : Initialiser le ThemeManager APR√àS cr√©ation de la fen√™tre
        try:
            from ui.themes import theme_manager
            theme_manager.initialize_now()
            print("‚úÖ DEBUG - ThemeManager initialis√©")
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur initialisation ThemeManager: {e}")

        # 5. Masquer la fen√™tre temporairement pendant l'initialisation
        self.root.withdraw()

        # 6. Configuration de la fen√™tre (titre, minsize, ic√¥ne, protocole fermeture)
        self.setup_window()

        # 7. Initialisation des variables d'√©tat
        self.file_content = []
        self.original_path = None
        self.extraction_results = None
        self.last_extraction_time = 0
        self.last_reconstruction_time = 0
        self._save_mode = None

        # 8. Initialisation des widgets (√† None)
        self.label_chemin = None
        self.label_stats = None
        self.text_area = None
        self.bouton_auto_open = None
        self.bouton_validation = None
        self.bouton_theme = None
        self.frame_info = None
        self.title_label = None
        self.subtitle_label = None

        # NOUVEAU : Variables pour le mode texte
        self.text_mode = "empty"  # "file", "clipboard", "manual", "empty"
        self.source_info = None
        self.clipboard_counter = 0
        self.input_mode = "drag_drop"  # "drag_drop" ou "ctrl_v"
        self.bouton_input_mode = None
        # 9. Cr√©ation de l'interface
        self.create_interface()

        # 10. Application du th√®me
        self.appliquer_theme()

        # 11. Mise √† jour Drag & Drop (si text_area pr√™te)
        if self.text_area:
            try:
                self._update_drag_drop_display()
                print("‚úÖ DEBUG - Affichage initial Drag & Drop configur√©")
            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG - Erreur affichage initial D&D: {e}")

        # 12. R√©afficher la fen√™tre une fois pr√™te
        print("‚û°Ô∏è Avant deiconify")
        self.root.deiconify()

        # 13. Centrage de la fen√™tre
        print("‚û°Ô∏è Avant center_window")
        self.center_window()

        # 14. V√©rification tutoriel premier lancement
        print("‚û°Ô∏è Avant check_tutorial")
        self.check_tutorial()

        # ‚úÖ CORRECTION : Rendre l'instance accessible globalement
        global app_instance
        app_instance = self

        # 15. Logs et prints finaux
        print(f"DEBUG - file_content au d√©marrage: {hasattr(self, 'file_content')}")
        print(f"DEBUG - text_area au d√©marrage: {hasattr(self, 'text_area')}")

        log_message("INFO", f"=== D√âMARRAGE DU TRADUCTEUR REN'PY PRO v{VERSION} ===")
        log_message("INFO", "Dossiers organis√©s cr√©√©s: temporaire, sauvegardes, avertissements, logs")

    def setup_window(self):
        """Configure la fen√™tre principale"""
        self.root.title(WINDOW_CONFIG["title"])
        self.root.geometry(WINDOW_CONFIG["geometry"])
        self.root.minsize(*WINDOW_CONFIG["min_size"])
        
        # Ic√¥ne si disponible
        try:
            self.root.iconbitmap("icone.ico")
        except:
            pass
        
        # Gestion de la fermeture
        self.root.protocol("WM_DELETE_WINDOW", self.fermer_application)

    def check_imports(self):
        """V√©rifie que tous les modules n√©cessaires sont disponibles"""
        required_modules = [
            'tkinter', 'tkinterdnd2', 'core.extraction', 'core.reconstruction',
            'core.validation', 'core.file_manager', 'core.coherence_checker',
            'ui.backup_manager', 'ui.interface', 'ui.themes', 'ui.tutorial',
            'utils.constants', 'utils.config', 'utils.logging'
        ]
        
        missing = []
        for module in required_modules:
            try:
                if module == 'tkinterdnd2':
                    import tkinterdnd2
                else:
                    __import__(module)
            except ImportError:
                missing.append(module)
        
        if missing:
            print(f"‚ö†Ô∏è Modules manquants: {', '.join(missing)}")
            return False
        return True

    def center_window(self):
        """Centre la fen√™tre sur l'√©cran"""
        try:
            self.root.update_idletasks()

            width = self.root.winfo_width()
            height = self.root.winfo_height()

            # Fallback si width/height trop petits
            if width < 100 or height < 100:
                width, height = 1100, 700  # Valeur par d√©faut

            x = (self.root.winfo_screenwidth() // 2) - (width // 2)
            y = (self.root.winfo_screenheight() // 2) - (height // 2)

            self.root.geometry(f"{width}x{height}+{x}+{y}")
            print(f"‚úÖ Fen√™tre centr√©e √† {x},{y} avec taille {width}x{height}")
        except Exception as e:
            print(f"‚ùå Erreur dans center_window: {e}")
    
    def check_tutorial(self):
        """V√©rifie si le tutoriel doit √™tre affich√© - VERSION INTELLIGENTE"""
        if check_first_launch():
            log_message("INFO", "Premier lancement d√©tect√© - Syst√®me intelligent activ√©")
            # Afficher le tutoriel intelligent apr√®s un d√©lai
            self.root.after(500, self._show_first_launch_tutorial_smart)
        else:
            log_message("INFO", "Utilisateur exp√©riment√© d√©tect√© - Pas de tutoriel automatique")

    # =============================================================================
    # M√âTHODES DE GESTION DE L'INTERFACE
    # =============================================================================

    def create_interface(self):
        """Cr√©e l'interface utilisateur compl√®te"""
        # Header avec titre
        self.create_header()
        
        # Frame d'information
        self.create_info_frame()
        
        # Frame des boutons d'ouverture
        self.create_open_frame()
        
        # Frame des actions principales
        self.create_actions_frame()
        
        # Zone de contenu principal
        self.create_content_frame()

    # 2. AJOUTER ces nouvelles m√©thodes dans la classe TraducteurRenPyPro :

    def _show_first_launch_tutorial_smart(self):
        """Version INTELLIGENTE : Maximum 3 tentatives avec messages adaptatifs"""
        try:
            from ui.tutorial import show_tutorial, show_minimal_tutorial, mark_tutorial_shown
            from utils.constants import FILE_NAMES
            
            # Compter les tentatives
            attempts_file = FILE_NAMES["tutorial_flag"].replace(".flag", "_attempts.txt")
            attempts = self._get_tutorial_attempts(attempts_file)
            
            if attempts >= 3:
                # 3 tentatives d√©pass√©es ‚Üí Marquer d√©finitivement comme vu
                mark_tutorial_shown()
                log_message("INFO", "3 tentatives de tutoriel d√©pass√©es - Marquage d√©finitif")
                return
            
            # Message adapt√© selon le nombre de tentatives
            if attempts == 0:
                title = "üéâ Bienvenue dans Traducteur Ren'Py Pro v2.4.0 !"
                message = "C'est votre premi√®re utilisation !\n\nüéØ D√©couvrez toutes les nouveaut√©s et fonctionnalit√©s."
                footer = "üí° Ce guide vous fera gagner du temps"
            elif attempts == 1:
                title = "üéØ Guide Traducteur Ren'Py Pro"
                message = "Nous vous proposons √† nouveau le guide.\n\nüìö Architecture refactoris√©e, glossaire permanent, validation avanc√©e..."
                footer = "üí° Beaucoup de nouveaut√©s utiles √† d√©couvrir"
            else:  # attempts == 2
                title = "üìö Derni√®re proposition de guide"
                message = "Derni√®re opportunit√© pour d√©couvrir le guide.\n\nüöÄ Apr√®s cela, accessible uniquement via le bouton 'üéì Aide'."
                footer = "üí° Tentative 3/3 - Voulez-vous vraiment passer √† c√¥t√© ?"
            
            welcome_result = messagebox.askyesnocancel(
                title,
                f"{message}\n\n"
                "üéì Que souhaitez-vous faire ?\n\n"
                "‚Ä¢ Oui = üìñ Guide complet (toutes les fonctionnalit√©s)\n"
                "‚Ä¢ Non = ‚ö° Guide express (5 minutes)\n" 
                "‚Ä¢ Annuler = üîÑ Reporter au prochain lancement\n\n"
                f"{footer}"
            )
            
            if welcome_result is True:
                # Guide complet consult√© ‚Üí Marquer d√©finitivement
                show_tutorial()
                mark_tutorial_shown()
                log_message("INFO", f"Tentative {attempts + 1}/3 : Guide complet consult√© - Marqu√© d√©finitivement")
                
            elif welcome_result is False:
                # Guide express consult√© ‚Üí Marquer d√©finitivement
                show_minimal_tutorial()
                mark_tutorial_shown()
                log_message("INFO", f"Tentative {attempts + 1}/3 : Guide express consult√© - Marqu√© d√©finitivement")
                
            else:
                # Reporter ‚Üí Incr√©menter compteur
                self._increment_tutorial_attempts(attempts_file)
                self._show_help_reminder_smart(attempts + 1)
                log_message("INFO", f"Tentative {attempts + 1}/3 : Guide report√©")
                
        except Exception as e:
            log_message("WARNING", f"Erreur tutoriel intelligent: {e}")
            # Fallback : Marquer comme vu pour √©viter les boucles
            try:
                mark_tutorial_shown()
            except:
                pass

    def _get_tutorial_attempts(self, attempts_file):
        """R√©cup√®re le nombre de tentatives de tutoriel"""
        try:
            if os.path.exists(attempts_file):
                with open(attempts_file, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                    return int(content) if content.isdigit() else 0
            return 0
        except Exception as e:
            log_message("WARNING", f"Erreur lecture tentatives: {e}")
            return 0

    def _increment_tutorial_attempts(self, attempts_file):
        """Incr√©mente le compteur de tentatives"""
        try:
            attempts = self._get_tutorial_attempts(attempts_file) + 1
            
            # S'assurer que le dossier existe
            os.makedirs(os.path.dirname(attempts_file), exist_ok=True)
            
            with open(attempts_file, 'w', encoding='utf-8') as f:
                f.write(str(attempts))
            
            log_message("INFO", f"Compteur tentatives tutoriel: {attempts}/3")
            
        except Exception as e:
            log_message("WARNING", f"Erreur incr√©ment tentatives: {e}")

    def _show_help_reminder_smart(self, attempt_number):
        """Affiche un rappel adaptatif selon le nombre de tentatives"""
        try:
            if attempt_number == 1:
                reminder_text = "üí° Guide disponible via 'üéì Aide' - Vous avez encore 2 chances au prochain lancement"
            elif attempt_number == 2:
                reminder_text = "üí° Guide disponible via 'üéì Aide' - Plus qu'une chance au prochain lancement !"
            else:  # attempt_number == 3
                reminder_text = "üí° Aide toujours disponible via le bouton 'üéì Aide' en haut √† droite"
            
            # Afficher dans la barre de statut
            if hasattr(self, 'label_stats') and self.label_stats:
                current_stats = self.label_stats.cget("text")
                self.label_stats.config(text=reminder_text)
                
                # Restaurer apr√®s 7 secondes (plus long pour √™tre s√ªr qu'il soit vu)
                self.root.after(7000, lambda: self.label_stats.config(text=current_stats))
            
        except Exception as e:
            log_message("WARNING", f"Erreur rappel intelligent: {e}")

    def create_header(self):
        """Cr√©e l'en-t√™te de l'application - VERSION TH√àME UNIFORME"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        frame_header = tk.Frame(self.root, height=80, bg=theme["bg"])
        frame_header.pack(fill='x', padx=20, pady=(20, 10))
        frame_header.pack_propagate(False)
        
        # Titre principal
        self.title_label = tk.Label(
            frame_header, 
            text=f"üéÆ Traducteur Ren'Py Pro v{VERSION}",
            font=('Segoe UI Emoji', 16, 'bold'),
            bg=theme["bg"],
            fg=theme["fg"]
        )
        self.title_label.pack(side='left')
        
        # Sous-titre
        self.subtitle_label = tk.Label(
            frame_header, 
            text="Extraction et traduction intelligente de scripts",
            font=('Segoe UI Emoji', 10),
            bg=theme["bg"],
            fg=theme["fg"]
        )
        self.subtitle_label.pack(side='left', padx=(20, 0))
        
        # Bouton th√®me
        self.bouton_theme = tk.Button(
            frame_header, 
            text="‚òÄÔ∏è Mode Clair" if config_manager.is_dark_mode_enabled() else "üåô Mode Sombre",
            font=('Segoe UI Emoji', 10),
            bg='#ffc107',
            fg='#000000',
            activebackground='#e0a800',
            bd=1,
            relief='solid',
            pady=8,
            padx=10,
            command=self.toggle_dark_mode
        )
        self.bouton_theme.pack(side='left', padx=10)

        # Bouton Quitter
        self.bouton_quitter = tk.Button(
            frame_header,
            text="‚ùå Quitter",
            font=('Segoe UI Emoji', 10),
            bg='#dc3545',
            fg='#ffffff',
            activebackground='#c82333',
            bd=1,
            relief='solid',
            pady=8,
            padx=10,
            command=self.fermer_application
        )
        self.bouton_quitter.pack(side='right', padx=5)

    def create_info_frame(self):
        """Cr√©e le frame d'informations - VERSION TH√àME UNIFORME"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        self.frame_info = tk.Frame(
            self.root, 
            bg=theme["frame_bg"], 
            relief='flat', 
            bd=1, 
            padx=8, 
            pady=10
        )
        self.frame_info.pack(fill='x', padx=20, pady=5)
        
        self.label_chemin = tk.Label(
            self.frame_info, 
            text="üìÑ Aucun fichier s√©lectionn√©", 
            font=('Segoe UI Emoji', 9, 'bold'),
            bg=theme["frame_bg"], 
            fg=theme["accent"]
        )
        self.label_chemin.pack(side='left')
        
        self.label_stats = tk.Label(
            self.frame_info, 
            text="üìä Pr√™t", 
            font=('Segoe UI Emoji', 10),
            bg=theme["frame_bg"], 
            fg=theme["fg"]
        )
        self.label_stats.pack(side='right')

    def create_open_frame(self):
        """Cr√©e le frame des boutons d'ouverture - VERSION TH√àME UNIFORME"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        frame_open = tk.Frame(self.root, bg=theme["bg"], height=50)
        frame_open.pack(padx=20, pady=5)
        
        # 4 colonnes : 2 boutons bleus, 2 boutons rouges
        for col in range(4):
            frame_open.columnconfigure(col, weight=1, uniform="grp_open")
        
        # Bouton Ouvrir Fichier .rpy
        btn_fichier = tk.Button(
            frame_open,
            text="üìÇ Ouvrir Fichier .rpy",
            font=('Segoe UI Emoji', 11),
            bg='#007bff',
            fg='#000000',
            activebackground='#0056b3',
            bd=1,
            relief='solid',
            command=self.ouvrir_fichier_unique
        )
        btn_fichier.grid(row=0, column=0, sticky="nsew", padx=5, pady=8)
        
        # Bouton Ouvrir Dossier
        btn_dossier = tk.Button(
            frame_open,
            text="üìÅ Ouvrir Dossier",
            font=('Segoe UI Emoji', 11),
            bg='#007bff',
            fg='#000000',
            activebackground='#0056b3',
            bd=1,
            relief='solid',
            command=self.ouvrir_dossier
        )
        btn_dossier.grid(row=0, column=1, sticky="nsew", padx=5, pady=8)
        
        # Bouton Sauvegardes
        btn_sauvegardes = tk.Button(
            frame_open,
            text="üõ°Ô∏è Sauvegardes",
            font=('Segoe UI Emoji', 11),
            bg='#dc3545',
            fg='#000000',
            activebackground='#c82333',
            bd=1,
            relief='solid',
            command=self.gerer_sauvegardes
        )
        btn_sauvegardes.grid(row=0, column=2, sticky="nsew", padx=5, pady=8)
        
        # Bouton R√©initialiser
        btn_reinit = tk.Button(
            frame_open,
            text="üîÑ R√©initialiser",
            font=('Segoe UI Emoji', 10),
            bg='#dc3545',
            fg='#000000',
            activebackground='#c82333',
            bd=1,
            relief='solid',
            command=self.reinitialiser
        )
        btn_reinit.grid(row=0, column=3, sticky="nsew", padx=5, pady=8)

    def create_actions_frame(self):
        """Cr√©e le frame des actions principales - VERSION AVEC GLOSSAIRE"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        frame_actions = tk.Frame(self.root, height=80, bg=theme["bg"])
        frame_actions.pack(padx=20, pady=5)
        
        # ‚úÖ MODIFICATION : 10 colonnes au lieu de 9 pour inclure le glossaire
        for col in range(10):
            frame_actions.columnconfigure(col, weight=1, uniform="grp_act")
        
        # Boutons principaux
        btn_extraire = tk.Button(
            frame_actions, text="‚ö° Extraire", font=('Segoe UI Emoji', 11),
            bg='#28a745', fg='#000000', activebackground='#1e7e34',
            bd=1, relief='solid', command=self.extraire_textes_enhanced
        )
        btn_extraire.grid(row=0, column=0, sticky="nsew", padx=5, pady=15)

        btn_reconstruire = tk.Button(
            frame_actions, text="üîß Reconstruire", font=('Segoe UI Emoji', 11),
            bg='#28a745', fg='#000000', activebackground='#1e7e34',
            bd=1, relief='solid', command=self.reconstruire_fichier_enhanced
        )
        btn_reconstruire.grid(row=0, column=1, sticky="nsew", padx=5, pady=15)

        # Bouton mode d'entr√©e
        self.bouton_input_mode = tk.Button(
            frame_actions, text="üéØ D&D", font=('Segoe UI Emoji', 10),
            bg='#17a2b8', fg='#000000', activebackground='#138496',
            bd=1, relief='solid', command=self.toggle_input_mode
        )
        self.bouton_input_mode.grid(row=0, column=2, sticky="nsew", padx=5, pady=15)

        # ‚úÖ NOUVEAU : Bouton Glossaire
        btn_glossaire = tk.Button(
            frame_actions, text="üìö Glossaire", font=('Segoe UI Emoji', 10),
            bg='#6f42c1', fg='#000000', activebackground='#5a359a',
            bd=1, relief='solid', command=self.ouvrir_glossaire
        )
        btn_glossaire.grid(row=0, column=3, sticky="nsew", padx=5, pady=15)

        # Utilitaires (d√©cal√©s d'une colonne)
        utilitaires = [
            ("üßπ Nettoyer", self.nettoyer_page, '#ffc107'),
            ("üìÅ Temporaire", self.ouvrir_dossier_temporaire, '#ffc107'),
            ("‚ö†Ô∏è Avertissements", self.ouvrir_avertissements, '#ffc107'),
            (f"üìÇ Auto : {'ON' if config_manager.is_auto_open_enabled() else 'OFF'}", 
            self.handle_toggle_auto_open, '#ffc107'),
            (f"‚úÖ Valid: {'ON' if config_manager.is_validation_enabled() else 'OFF'}", 
            self.toggle_validation, '#ffc107'),
            ("üéì Aide", self.afficher_aide_intelligente, '#ffc107')
        ]
        
        for idx, (txt, cmd, couleur) in enumerate(utilitaires, start=4):
            btn = tk.Button(frame_actions, text=txt, font=('Segoe UI Emoji', 10),
                        bg=couleur, fg='#000000' if couleur != '#dc3545' else '#ffffff', 
                        activebackground='#e0a800' if couleur == '#ffc107' else '#b02a37',
                        bd=1, relief='solid', command=cmd)
            btn.grid(row=0, column=idx, sticky="nsew", padx=5, pady=15)
            
            if cmd == self.handle_toggle_auto_open:
                self.bouton_auto_open = btn
            elif cmd == self.toggle_validation:
                self.bouton_validation = btn

    def afficher_aide_intelligente(self):
        """Affiche l'aide selon l'exp√©rience utilisateur - VERSION INTELLIGENTE"""
        try:
            # D√©terminer le type d'utilisateur
            user_type = self._determine_user_type()
            
            if user_type == "nouveau":
                # Nouvel utilisateur (< 3 jours) : Proposer guide complet d'abord
                result = messagebox.askyesnocancel(
                    "üéì Aide Traducteur Ren'Py Pro",
                    "Vous semblez encore d√©couvrir l'application.\n\n"
                    "Que souhaitez-vous consulter ?\n\n"
                    "‚Ä¢ Oui = üìñ Guide complet (recommand√©)\n"
                    "‚Ä¢ Non = üìã Menu d'aide (acc√®s rapide aux sections)\n"
                    "‚Ä¢ Annuler = üÜï Nouveaut√©s v2.4.0 uniquement"
                )
                
                if result is True:
                    from ui.tutorial import show_tutorial
                    show_tutorial()
                    log_message("INFO", "Nouvel utilisateur : Guide complet demand√©")
                elif result is False:
                    from ui.tutorial import show_help_menu
                    show_help_menu()
                    log_message("INFO", "Nouvel utilisateur : Menu d'aide demand√©")
                else:
                    from ui.tutorial import show_whats_new
                    show_whats_new()
                    log_message("INFO", "Nouvel utilisateur : Nouveaut√©s demand√©es")
                    
            elif user_type == "recent":
                # Utilisateur r√©cent (3-7 jours) : Choix √©quilibr√©
                result = messagebox.askyesno(
                    "üéì Centre d'aide",
                    "Que souhaitez-vous consulter ?\n\n"
                    "‚Ä¢ Oui = üìã Menu d'aide (acc√®s √† toutes les sections)\n"
                    "‚Ä¢ Non = üÜï Nouveaut√©s v2.4.0 directement"
                )
                
                if result:
                    from ui.tutorial import show_help_menu
                    show_help_menu()
                    log_message("INFO", "Utilisateur r√©cent : Menu d'aide demand√©")
                else:
                    from ui.tutorial import show_whats_new
                    show_whats_new()
                    log_message("INFO", "Utilisateur r√©cent : Nouveaut√©s demand√©es")
            else:
                # Utilisateur exp√©riment√© (> 7 jours) : Directement le menu
                from ui.tutorial import show_help_menu
                show_help_menu()
                log_message("INFO", "Utilisateur exp√©riment√© : Menu d'aide ouvert directement")
                
        except Exception as e:
            log_message("ERREUR", "Erreur aide intelligente", e)
            # Fallback vers le menu d'aide
            try:
                from ui.tutorial import show_help_menu
                show_help_menu()
            except:
                self.afficher_tutoriel()

    def _determine_user_type(self):
        """D√©termine le type d'utilisateur selon son anciennet√©"""
        try:
            import datetime
            from utils.constants import FILE_NAMES
            
            tutorial_flag_file = FILE_NAMES["tutorial_flag"]
            
            if not os.path.exists(tutorial_flag_file):
                return "nouveau"  # Pas de flag = tr√®s nouveau
            
            # Calculer l'anciennet√©
            creation_time = os.path.getctime(tutorial_flag_file)
            creation_date = datetime.datetime.fromtimestamp(creation_time)
            now = datetime.datetime.now()
            days_since_first_use = (now - creation_date).days
            
            if days_since_first_use <= 3:
                return "nouveau"        # 0-3 jours
            elif days_since_first_use <= 7:
                return "recent"         # 4-7 jours  
            else:
                return "experimente"    # 8+ jours
            
        except Exception as e:
            log_message("WARNING", f"Erreur d√©termination type utilisateur: {e}")
            return "experimente"  # Par d√©faut, traiter comme exp√©riment√©

    def ouvrir_glossaire(self):
        """Ouvre le gestionnaire de glossaire"""
        try:
            show_glossary_manager(self.root)
            log_message("INFO", "Gestionnaire de glossaire ouvert")
        except Exception as e:
            log_message("ERREUR", "Erreur lors de l'ouverture du glossaire", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le glossaire:\n{str(e)}")

    def extraire_textes_enhanced(self):
        """Extrait les textes avec support du glossaire"""
        if not self.file_content:
            mode_info = "D&D" if self.input_mode == "drag_drop" else "Ctrl+V"
            messagebox.showwarning("‚ö†Ô∏è Erreur", 
                f"Chargez d'abord un fichier .rpy ou collez du contenu.\n"
                f"Mode actuel: {mode_info}")
            return
        try:
            self.label_stats.config(text="‚öôÔ∏è Extraction en cours...")
            self.root.update()
            
            # Sauvegarde de s√©curit√©
            if self.original_path:
                backup_result = create_safety_backup(self.original_path)
                if not backup_result['success']:
                    log_message("WARNING", f"Sauvegarde √©chou√©e: {backup_result['error']}")
            
            # ‚úÖ CORRECTION : Utiliser l'import de fonction au lieu de self
            from core.extraction_enhanced import extraire_textes_enhanced as extract_func
            self.extraction_results = extract_func(self.file_content, self.original_path)
            
            # Mise √† jour des compteurs
            from core.extraction_enhanced import EnhancedTextExtractor
            extractor = EnhancedTextExtractor()
            extractor.load_file_content(self.file_content, self.original_path)
            results = extractor.extract_texts()
            
            self.extraction_results = results
            self.last_extraction_time = extractor.extraction_time
            self.extraction_results['extracted_count'] = extractor.extracted_count
            self.extraction_results['asterix_count'] = extractor.asterix_count
            self.extraction_results['empty_count'] = extractor.empty_count
            
            # Gestion de l'ouverture des fichiers
            files_to_open = [f for f in [
                self.extraction_results.get('main_file'),
                self.extraction_results.get('asterix_file'), 
                self.extraction_results.get('empty_file'),
                self.extraction_results.get('glossary_file')  # ‚úÖ NOUVEAU
            ] if f]
            
            auto_open_enabled = config_manager.is_auto_open_enabled()
            
            if auto_open_enabled and files_to_open:
                FileOpener.open_files(files_to_open, True)
                open_info = f"\nüìÇ {len(files_to_open)} fichier(s) ouvert(s) automatiquement"
            elif not auto_open_enabled and files_to_open:
                result = messagebox.askyesno("üìÇ Ouvrir les fichiers ?",
                    f"Extraction termin√©e !\n\nüìù {extractor.extracted_count} textes extraits\n\n"
                    f"Auto-Open d√©sactiv√©. Ouvrir les {len(files_to_open)} fichier(s) ?")
                
                if result:
                    FileOpener.open_files(files_to_open, True)
                    open_info = f"\nüìÇ {len(files_to_open)} fichier(s) ouvert(s) sur demande"
                else:
                    open_info = f"\nüí° {len(files_to_open)} fichier(s) cr√©√©(s) (non ouverts)"
            else:
                open_info = ""
            
            # Message de succ√®s avec glossaire
            message = f"‚úÖ Extraction termin√©e en {self.last_extraction_time:.2f}s !"
            message += f"\n\nüìù {extractor.extracted_count} textes extraits"
            
            if extractor.asterix_count > 0:
                message += f"\n‚≠ê {extractor.asterix_count} expressions entre ast√©risques"
            if extractor.empty_count > 0:
                message += f"\nüî≥ {extractor.empty_count} textes vides/espaces"
            if len(extractor.glossary_mapping) > 0:
                message += f"\nüìö {len(extractor.glossary_mapping)} termes du glossaire prot√©g√©s"
            
            message += open_info
            
            # Info sur le mode source
            if hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                message += f"\n\nüìã Source: Contenu du presse-papier"
            
            self.label_stats.config(text=f"üìä {extractor.extracted_count} textes extraits | ‚è±Ô∏è {self.last_extraction_time:.2f}s")
            messagebox.showinfo("üéâ Extraction termin√©e", message)
            
        except Exception as e:
            log_message("ERREUR", "Erreur extraction avec glossaire", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur pendant l'extraction:\n{str(e)}")
            self.label_stats.config(text="‚ùå Erreur lors de l'extraction")

    def reconstruire_fichier_enhanced(self):
        """Reconstruit avec support du glossaire"""
        if not self.file_content or not self.original_path:
            messagebox.showerror("‚ùå Erreur", MESSAGES["no_file_loaded"])
            return
        
        try:
            # V√©rifier que les fichiers d'extraction existent
            from core.extraction_enhanced import get_file_base_name
            file_base = get_file_base_name(self.original_path)
            
            if not self.extraction_results:
                messagebox.showerror("‚ùå Erreur", "Effectuez d'abord l'extraction du fichier")
                return
            
            # Validation si activ√©e
            if config_manager.is_validation_enabled():
                extracted_count = self.extraction_results.get('extracted_count', 0)
                asterix_count = self.extraction_results.get('asterix_count', 0)
                empty_count = self.extraction_results.get('empty_count', 0)
                
                validation_result = validate_before_reconstruction(file_base, extracted_count, asterix_count, empty_count)
                
                if not validation_result['overall_valid']:
                    errors = []
                    if validation_result['main_file'] and not validation_result['main_file']['valid']:
                        errors.extend(validation_result['main_file'].get('errors', []))
                    
                    error_message = "Validation √©chou√©e:\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors[:3])
                    if len(errors) > 3:
                        error_message += f"\n... et {len(errors) - 3} autres erreurs"
                    
                    result = messagebox.askyesno("‚ö†Ô∏è Validation √©chou√©e", error_message + "\n\nContinuer quand m√™me ?")
                    if not result:
                        return
            
            # Gestion du mode de sauvegarde
            save_mode = 'new_file'
            
            if hasattr(self, 'text_mode') and self.text_mode == "file":
                if not self._save_mode:
                    save_dialog = SaveModeDialog(self.root)
                    self._save_mode = save_dialog.show()
                    
                    if not self._save_mode:
                        return
                save_mode = self._save_mode
            elif hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                save_mode = 'new_file'
            
            # ‚úÖ CORRECTION : Utiliser l'import de fonction au lieu de self
            self.label_stats.config(text="üîß Reconstruction en cours...")
            self.root.update()
            
            start_time = time.time()
            from core.reconstruction_enhanced import reconstruire_fichier_enhanced as reconstruct_func
            result = reconstruct_func(self.file_content, self.original_path, save_mode)
            self.last_reconstruction_time = time.time() - start_time
            
            if result:
                # Contr√¥le de coh√©rence si validation activ√©e
                if config_manager.is_validation_enabled():
                    coherence_result = check_file_coherence(result['save_path'])
                    
                    if coherence_result['issues_found'] > 0:
                        response = messagebox.askyesnocancel(
                            "‚ö†Ô∏è Probl√®mes de coh√©rence d√©tect√©s",
                            f"{coherence_result['issues_found']} probl√®me(s) d√©tect√©(s) dans la traduction.\n\n"
                            f"Un fichier d'avertissement a √©t√© cr√©√©.\n\n"
                            f"‚Ä¢ Oui = Ouvrir le fichier d'avertissement\n"
                            f"‚Ä¢ Non = Continuer sans ouvrir\n"
                            f"‚Ä¢ Annuler = Voir les d√©tails"
                        )
                        
                        if response is True:
                            try:
                                if coherence_result.get('warning_file'):
                                    FileOpener.open_files([coherence_result['warning_file']], True)
                            except Exception as e:
                                log_message("WARNING", f"Impossible d'ouvrir le fichier d'avertissement", e)
                        elif response is None:
                            self._show_coherence_issues(coherence_result['issues'])
                
                # Message de succ√®s
                self.label_stats.config(text=f"‚úÖ Reconstruction termin√©e | ‚è±Ô∏è {self.last_reconstruction_time:.2f}s")
                
                # Ouvrir le fichier reconstruit si demand√©
                try:
                    FileOpener.open_files([result['save_path']], config_manager.is_auto_open_enabled())
                except:
                    pass
                
                # Messages adapt√©s selon le mode
                if hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                    messagebox.showinfo("üéâ Reconstruction termin√©e", 
                        f"‚úÖ Fichier traduit cr√©√© avec succ√®s !\n\n"
                        f"üìÅ Fichier: {os.path.basename(result['save_path'])}\n"
                        f"üìã Source: Contenu du presse-papier\n"
                        f"üìö Glossaire: Termes appliqu√©s automatiquement\n"
                        f"‚è±Ô∏è Temps: {self.last_reconstruction_time:.2f}s")
                else:
                    # Proposer de passer au fichier suivant en mode dossier
                    if file_manager.is_folder_mode:
                        self.handle_next_file()
                    else:
                        messagebox.showinfo("üéâ Reconstruction termin√©e", 
                            f"‚úÖ Fichier traduit cr√©√© avec succ√®s !\n\n"
                            f"üìÅ Fichier: {os.path.basename(result['save_path'])}\n"
                            f"üìö Glossaire: Termes appliqu√©s automatiquement\n"
                            f"‚è±Ô∏è Temps: {self.last_reconstruction_time:.2f}s")
            else:
                self.label_stats.config(text="‚ùå Erreur lors de la reconstruction")
                messagebox.showerror("‚ùå Erreur", "Erreur lors de la reconstruction")
                
        except Exception as e:
            log_message("ERREUR", "Erreur lors de la reconstruction avec glossaire", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors de la reconstruction:\n{str(e)}")
            self.label_stats.config(text="‚ùå Erreur lors de la reconstruction")

    def appliquer_theme_enhanced(self):
        """Application du th√®me avec support simplifi√©"""
        try:
            from ui.themes import theme_manager
            
            current_mode = "dark" if config_manager.is_dark_mode_enabled() else "light"
            theme_manager.set_theme(current_mode)
            theme = theme_manager.get_theme()
            
            # Appliquer le th√®me √† la fen√™tre principale
            self.root.configure(bg=theme["bg"])

            # Widgets principaux
            widgets_to_update = [
                (self.title_label, theme["bg"], theme["fg"]),
                (self.subtitle_label, theme["bg"], theme["fg"]),
                (self.label_chemin, theme["frame_bg"], theme["accent"]),
                (self.label_stats, theme["frame_bg"], theme["fg"])
            ]

            for widget, bg_color, fg_color in widgets_to_update:
                if widget:
                    try:
                        widget.configure(bg=bg_color, fg=fg_color)
                    except Exception as e:
                        print(f"‚ö†Ô∏è DEBUG - Erreur configuration widget: {e}")

            # Frame info
            if self.frame_info:
                try:
                    self.frame_info.configure(bg=theme["frame_bg"])
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur configuration frame_info: {e}")

            # Zone de texte simplifi√©e
            if self.text_area and hasattr(self.text_area, 'set_theme'):
                try:
                    self.text_area.set_theme(current_mode)
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur configuration text_area: {e}")

            # Mise √† jour des couleurs de boutons
            self._update_button_text_colors(theme)

            print(f"‚úÖ DEBUG - Th√®me {current_mode} appliqu√© avec succ√®s")
            
        except Exception as e:
            print(f"üí• DEBUG - Erreur critique appliquer_theme: {e}")
            log_message("WARNING", f"Erreur application du th√®me", e)

    def create_content_frame(self):
        """Cr√©e la zone de contenu - VERSION AM√âLIOR√âE avec num√©ros de ligne"""
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        
        frame_content = tk.Frame(self.root, bg=theme["bg"])
        frame_content.pack(expand=True, fill='both', padx=20, pady=(0, 10))
        
        # ScrolledText
        self.text_area = ScrolledText(
            frame_content,
            font=('Cascadia Code', 10),
            bg=theme["entry_bg"],
            fg=theme["entry_fg"]
        )
        self.text_area.pack(expand=True, fill='both')
        # Configuration mode initial
        try:
            self.configure_input_mode()
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur config mode initial: {e}")
        
        self.root.after(500, self._initialize_text_area_display)

    def _initialize_text_area_display(self):
        """Initialise l'affichage de la zone de texte apr√®s cr√©ation compl√®te"""
        try:
            print("üîÑ DEBUG - Initialisation affichage zone de texte")
            
            # V√©rifier que text_area existe et est pr√™te
            if not hasattr(self, 'text_area') or not self.text_area:
                print("‚ö†Ô∏è DEBUG - text_area pas encore cr√©√©e")
                return
            
            # V√©rifier l'√©tat de file_content (doit √™tre initialis√© dans __init__)
            if not hasattr(self, 'file_content'):
                print("‚ö†Ô∏è DEBUG - file_content pas initialis√©")
                self.file_content = []  # Initialiser par d√©faut
            
            print(f"üîç DEBUG - √âtat file_content: {len(self.file_content) if self.file_content else 0} √©l√©ments")
            
            # Mettre √† jour l'affichage
            self._update_drag_drop_display()
            
            print("‚úÖ DEBUG - Initialisation affichage termin√©e")
            
        except Exception as e:
            print(f"üí• DEBUG - Erreur initialisation affichage: {str(e)}")
            log_message("WARNING", f"Erreur initialisation affichage zone de texte", e)

    # =============================================================================
    # M√âTHODES DE GESTION DES TH√àMES
    # =============================================================================

    def toggle_dark_mode(self):
        """‚úÖ BASCULEMENT DE TH√àME CORRIG√â - Application compl√®te"""
        try:
            # 1. Met √† jour la config
            config_manager.toggle_dark_mode()

            # 2. ‚úÖ NOUVEAU : Appliquer le th√®me imm√©diatement au theme_manager
            from ui.themes import theme_manager
            new_theme = "dark" if config_manager.is_dark_mode_enabled() else "light"
            theme_manager.set_theme(new_theme)
            theme = theme_manager.get_theme()

            # 3. ‚úÖ APPLIQUER LE TH√àME √Ä LA FEN√äTRE PRINCIPALE EN PREMIER
            self.root.configure(bg=theme["bg"])

            # 4. Sauvegarder l'√©tat avant de recr√©er
            current_file_content = self.file_content.copy() if self.file_content else []
            current_original_path = self.original_path
            current_extraction_results = self.extraction_results
            current_last_extraction_time = self.last_extraction_time
            current_last_reconstruction_time = self.last_reconstruction_time
            current_save_mode = self._save_mode
            current_text_mode = getattr(self, 'text_mode', 'empty')
            current_input_mode = getattr(self, 'input_mode', 'drag_drop')
            current_source_info = getattr(self, 'source_info', None)
            current_clipboard_counter = getattr(self, 'clipboard_counter', 0)

            # 5. ‚úÖ D√âTRUIRE ET RECR√âER L'INTERFACE COMPL√àTEMENT
            for widget in self.root.winfo_children():
                widget.destroy()

            # 6. Recr√©er l'interface avec le nouveau th√®me
            self.create_interface()

            # 7. ‚úÖ FORCER L'APPLICATION DU TH√àME √Ä TOUS LES WIDGETS
            self.appliquer_theme_complet()

            # 8. Restaurer l'√©tat complet
            self.file_content = current_file_content
            self.original_path = current_original_path
            self.extraction_results = current_extraction_results
            self.last_extraction_time = current_last_extraction_time
            self.last_reconstruction_time = current_last_reconstruction_time
            self._save_mode = current_save_mode
            self.text_mode = current_text_mode
            self.input_mode = current_input_mode
            self.source_info = current_source_info
            self.clipboard_counter = current_clipboard_counter

            # 9. Restaurer l'affichage si un fichier √©tait charg√©
            if self.original_path and self.file_content:
                self.label_chemin.config(text=f"üìÑ {self.original_path}")
                self.text_area.delete('1.0', tk.END)
                self.text_area.insert(tk.END, ''.join(self.file_content))
                line_count = len(self.file_content)
                self.label_stats.config(text=f"üìä {line_count} lignes charg√©es")
            
            # 10. Reconfigurer le mode d'entr√©e
            try:
                self.configure_input_mode()
                self._update_drag_drop_display()
            except Exception as e:
                print(f"‚ö†Ô∏è DEBUG - Erreur reconfig apr√®s toggle theme: {e}")
            
            print(f"‚úÖ DEBUG - Basculement vers th√®me {new_theme} termin√© avec succ√®s")
            
        except Exception as e:
            print(f"üí• DEBUG - Erreur toggle_dark_mode: {e}")
            log_message("ERREUR", "Erreur basculement th√®me", e)

    def get_current_game_name(self):
        """R√©cup√®re le nom du jeu actuellement charg√©"""
        if self.original_path:
            return extract_game_name(self.original_path)
        return "Projet_Inconnu"

    def appliquer_theme(self):
        """‚úÖ VERSION CORRIG√âE - Application du th√®me"""
        try:
            from ui.themes import theme_manager
            
            # S'assurer que le theme manager utilise le bon th√®me
            current_mode = "dark" if config_manager.is_dark_mode_enabled() else "light"
            theme_manager.set_theme(current_mode)
            theme = theme_manager.get_theme()
            
            # CORRECTION : Appliquer le th√®me √† la fen√™tre principale
            self.root.configure(bg=theme["bg"])

            # Mettre √† jour TOUS les widgets principaux
            widgets_to_update = [
                (self.title_label, theme["bg"], theme["fg"]),
                (self.subtitle_label, theme["bg"], theme["fg"]),
                (self.label_chemin, theme["frame_bg"], theme["accent"]),
                (self.label_stats, theme["frame_bg"], theme["fg"])
            ]

            for widget, bg_color, fg_color in widgets_to_update:
                if widget:
                    try:
                        widget.configure(bg=bg_color, fg=fg_color)
                    except Exception as e:
                        print(f"‚ö†Ô∏è DEBUG - Erreur configuration widget: {e}")

            # CORRECTION : Frame info avec couleur uniforme
            if self.frame_info:
                try:
                    self.frame_info.configure(bg=theme["frame_bg"])
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur configuration frame_info: {e}")

            # NOUVEAU : Appliquer le th√®me √† TOUS les frames
            self._apply_theme_to_all_frames(theme)

            # Zone de texte avec couleurs du th√®me
            if self.text_area:
                try:
                    border_color = theme["frame_bg"]
                    self.text_area.configure(
                        bg=theme["entry_bg"],
                        fg=theme["entry_fg"],
                        selectbackground=theme["select_bg"],
                        selectforeground=theme["select_fg"],
                        insertbackground=theme["entry_fg"],
                        highlightthickness=1,
                        highlightbackground=border_color,
                        highlightcolor=theme["accent"]
                    )
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur configuration text_area: {e}")

            # ‚úÖ CORRECTION CRUCIALE : Couleurs de texte des boutons selon le th√®me
            self._update_button_text_colors(theme)

            print(f"‚úÖ DEBUG - Th√®me {current_mode} appliqu√© avec succ√®s")
            
        except Exception as e:
            print(f"üí• DEBUG - Erreur critique appliquer_theme: {e}")
            log_message("WARNING", f"Erreur application du th√®me", e)

    def appliquer_theme_complet(self):
        """‚úÖ Application compl√®te du th√®me - CORRECTION ERREUR"""
        try:
            from ui.themes import theme_manager
            theme = theme_manager.get_theme()

            # Appliquer √† la fen√™tre principale
            self.root.configure(bg=theme["bg"])

            # ‚úÖ MISE √Ä JOUR SP√âCIFIQUE DES WIDGETS PRINCIPAUX
            widgets_to_update = [
                (self.title_label, "title"),
                (self.subtitle_label, "subtitle"), 
                (self.label_chemin, "path_label"),
                (self.label_stats, "stats_label")
            ]

            for widget, widget_type in widgets_to_update:
                if widget:
                    theme_manager.apply_to_widget(widget, widget_type)

            # ‚úÖ MISE √Ä JOUR DE LA ZONE DE TEXTE
            if self.text_area:
                self.text_area.configure(
                    bg=theme["entry_bg"],
                    fg=theme["entry_fg"],
                    selectbackground=theme["select_bg"],
                    selectforeground=theme["select_fg"],
                    insertbackground=theme["entry_fg"],
                    highlightbackground=theme["frame_bg"],
                    highlightcolor=theme["accent"]
                )

            # ‚úÖ MISE √Ä JOUR DES FRAMES
            if self.frame_info:
                self.frame_info.configure(bg=theme["frame_bg"])

            print(f"‚úÖ DEBUG - Th√®me {theme_manager.current_theme} appliqu√© compl√®tement")

        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur appliquer_theme_complet: {e}")

    def _update_button_text_colors(self, theme):
        """‚úÖ NOUVELLE M√âTHODE : Met √† jour les couleurs de texte des boutons"""
        try:
            # D√©finir les couleurs de texte selon le th√®me
            button_text_color = "#ffffff" if config_manager.is_dark_mode_enabled() else "#000000"
            
            # Liste des boutons avec leurs couleurs sp√©cifiques
            buttons_to_update = [
                # Boutons qui gardent toujours du texte noir
                (self.bouton_theme, "#000000"),  # Toujours noir sur jaune
                (getattr(self, 'bouton_auto_open', None), "#000000"),  # Noir sur jaune
                (getattr(self, 'bouton_validation', None), "#000000"),  # Noir sur jaune
                
                # ‚úÖ CORRECTION : Bouton input_mode TOUJOURS noir
                (getattr(self, 'bouton_input_mode', None), "#000000"),  # ‚úÖ TOUJOURS NOIR
            ]
            
            for button, text_color in buttons_to_update:
                if button:
                    try:
                        button.configure(fg=text_color)
                    except Exception as e:
                        print(f"‚ö†Ô∏è DEBUG - Erreur couleur bouton: {e}")
                        
            print(f"‚úÖ DEBUG - Couleurs boutons mises √† jour pour th√®me {theme}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur _update_button_text_colors: {e}")

    def _apply_theme_to_all_frames(self, theme):
        """Applique le th√®me √† tous les frames de l'interface"""
        try:
            # Liste de tous les frames √† th√©matiser
            frames_to_theme = []
            
            # Parcourir tous les widgets enfants de la fen√™tre principale
            for widget in self.root.winfo_children():
                if isinstance(widget, tk.Frame):
                    frames_to_theme.append(widget)
                    # Parcourir les enfants des frames
                    self._collect_frames_recursive(widget, frames_to_theme)
            
            # Appliquer le th√®me √† tous les frames trouv√©s
            for frame in frames_to_theme:
                try:
                    frame.configure(bg=theme["bg"])
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur th√®me frame: {e}")
            
            print(f"‚úÖ DEBUG - Th√®me appliqu√© √† {len(frames_to_theme)} frames")
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur _apply_theme_to_all_frames: {e}")

    def _collect_frames_recursive(self, parent, frame_list):
        """Collecte r√©cursivement tous les frames enfants"""
        try:
            for child in parent.winfo_children():
                if isinstance(child, tk.Frame):
                    frame_list.append(child)
                    # R√©cursion pour les enfants
                    self._collect_frames_recursive(child, frame_list)
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur r√©cursion frames: {e}")

    # =============================================================================
    # M√âTHODES DE GESTION DES MODES D'ENTR√âE
    # =============================================================================

    def toggle_input_mode(self):
        """Bascule entre mode Drag & Drop et mode Ctrl+V avec avertissement"""
        try:
            old_mode = self.input_mode
            self.input_mode = "ctrl_v" if self.input_mode == "drag_drop" else "drag_drop"
            
            self.configure_input_mode()
            self.update_input_mode_button()
            
            # Messages adapt√©s selon la disponibilit√©
            if self.input_mode == "drag_drop" and not DND_AVAILABLE:
                messagebox.showinfo(
                    "üéØ Mode Drag & Drop",
                    "Mode: Drag & Drop (Non disponible)\n\n"
                    "‚ö†Ô∏è Votre syst√®me ne supporte pas le Drag & Drop.\n\n"
                    "üí° Utilisez les boutons bleus pour ouvrir des fichiers\n"
                    "ou basculez en mode Ctrl+V."
                )
            else:
                mode_name = "Drag & Drop" if self.input_mode == "drag_drop" else "Ctrl+V"
                mode_desc = ("Utilisez les boutons pour ouvrir des fichiers" if self.input_mode == "drag_drop" and not DND_AVAILABLE
                            else "Glissez des fichiers .rpy" if self.input_mode == "drag_drop" 
                            else "Utilisez Ctrl+V pour coller")
                
                messagebox.showinfo(f"üéØ Mode {mode_name}",
                    f"Mode: {mode_name}\nüí° {mode_desc}")
            
            log_message("INFO", f"Mode chang√©: {old_mode} ‚Üí {self.input_mode}")
            
        except Exception as e:
            log_message("ERREUR", "Erreur basculement mode", e)

    def configure_input_mode(self):
        """Configure selon le mode - VERSION UNIFI√âE"""
        try:
            if not hasattr(self, 'text_area') or not self.text_area:
                return
            
            if self.input_mode == "drag_drop":
                self.configure_drag_drop_mode()
            else:
                self.configure_ctrl_v_mode()
            
            self._update_drag_drop_display()
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur config mode: {e}")

    def configure_drag_drop_mode(self):
        """Mode D&D avec fallback intelligent"""
        try:
            # D√©sactiver Ctrl+V
            for binding in ['<Control-v>', '<Control-V>']:
                self.text_area.unbind(binding)
                self.root.unbind(binding)
            
            # Essayer d'activer D&D seulement si disponible
            if DND_AVAILABLE:
                print("‚úÖ DEBUG - Configuration Drag & Drop (disponible)")
                self._setup_drag_drop()
            else:
                print("‚ö†Ô∏è DEBUG - Drag & Drop non disponible - Mode boutons uniquement")
                # En mode D&D sans support, on garde juste les boutons
                # et le message d'invitation explique les alternatives
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur config D&D: {e}")

    def configure_ctrl_v_mode(self):
        """Mode Ctrl+V seul"""
        try:
            # D√©sactiver D&D
            try:
                if hasattr(self.text_area, 'drop_target_unregister'):
                    self.text_area.drop_target_unregister('DND_Files')
                for event in ['<<Drop>>', '<<DragEnter>>', '<<DragLeave>>']:
                    self.text_area.unbind(event)
            except:
                pass
            
            # Activer Ctrl+V
            for binding in ['<Control-v>', '<Control-V>']:
                self.text_area.bind(binding, self.handle_paste)
                self.root.bind(binding, self.handle_paste)
            
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur config Ctrl+V: {e}")

    def handle_paste(self, event=None):
        """Colle le contenu du presse-papier"""
        try:
            print("üìã DEBUG - handle_paste appel√©")
            
            # V√©rifier qu'on est bien en mode Ctrl+V
            if hasattr(self, 'input_mode') and self.input_mode != "ctrl_v":
                messagebox.showinfo(
                    "üìã Mode incorrect",
                    f"Mode actuel: Drag & Drop\n\n"
                    f"Pour utiliser Ctrl+V, basculez en mode Ctrl+V\n"
                    f"avec le bouton violet."
                )
                return "break"
            
            # R√©cup√©rer le presse-papier
            try:
                clipboard_content = self.root.clipboard_get()
            except tk.TclError:
                messagebox.showinfo("üìã Presse-papier vide", "Le presse-papier ne contient pas de texte.")
                return "break"
            
            if not clipboard_content or not clipboard_content.strip():
                messagebox.showinfo("üìã Presse-papier vide", "Le presse-papier ne contient pas de texte.")
                return "break"
            
            # V√©rifier conflit avec contenu existant
            if self.file_content and hasattr(self, 'text_mode') and self.text_mode == "file":
                result = messagebox.askyesno(
                    "üìã Remplacer le contenu",
                    f"Un fichier est d√©j√† charg√©.\n\n"
                    f"Voulez-vous le remplacer par le contenu du presse-papier ?"
                )
                if not result:
                    return "break"
            
            # Charger le contenu
            self.load_from_clipboard(clipboard_content)
            
            log_message("INFO", f"Contenu charg√© depuis le presse-papier: {len(clipboard_content)} caract√®res")
            return "break"
            
        except Exception as e:
            log_message("ERREUR", "Erreur lors du collage", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors du collage:\n{str(e)}")
            return "break"

    def load_from_clipboard(self, content):
        """Charge du contenu depuis le presse-papier"""
        try:
            # Convertir en liste de lignes
            lines = content.splitlines(keepends=True)
            
            # G√©n√©rer un nom unique pour ce contenu
            self.clipboard_counter = getattr(self, 'clipboard_counter', 0) + 1
            timestamp = int(time.time())
            virtual_name = f"clipboard_{self.clipboard_counter}_{timestamp}.rpy"
            
            # Charger le contenu dans les variables
            self.file_content = lines
            self.original_path = virtual_name
            self.text_mode = "clipboard"
            self.source_info = {
                'type': 'clipboard',
                'length': len(content),
                'lines': len(lines),
                'timestamp': timestamp
            }
            
            # Mettre √† jour l'interface
            self.text_area.configure(state='normal')
            self.text_area.delete('1.0', tk.END)
            self.text_area.insert('1.0', content)
            
            # Mise √† jour des labels
            self.label_chemin.config(text=f"üìã Contenu du presse-papier ({len(lines)} lignes)")
            self.label_stats.config(text=f"üìä {len(lines)} lignes charg√©es depuis le presse-papier")
            
            # Message de succ√®s
            auto_status = "activ√©" if config_manager.is_auto_open_enabled() else "d√©sactiv√©"
            messagebox.showinfo(
                "üìã Contenu charg√©",
                f"Contenu du presse-papier charg√© avec succ√®s !\n\n"
                f"üìù Lignes: {len(lines)}\n"
                f"üìä Caract√®res: {len(content)}\n\n"
                f"üí° Utilisez maintenant le bouton 'Extraire'\n"
                f"üìÇ Auto-Open: {auto_status}"
            )
            
        except Exception as e:
            log_message("ERREUR", "Erreur lors du chargement depuis le presse-papier", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors du chargement:\n{str(e)}")

    def is_likely_renpy_content(self, content):
        """V√©rifie si le contenu ressemble √† du code Ren'Py"""
        try:
            # Patterns typiques Ren'Py
            renpy_indicators = [
                'translate ', 'old "', 'new "', 'label ', 'menu:', 'scene ', 'show ', 
                'hide ', 'with ', 'jump ', 'call ', 'return', '"', '# game/', '# renpy/',
                'strings:', 'TODO:', 'Translation updated'
            ]
            
            lines = content.split('\n')
            indicator_count = 0
            
            for line in lines[:20]:  # V√©rifier les 20 premi√®res lignes
                line_stripped = line.strip().lower()
                for indicator in renpy_indicators:
                    if indicator.lower() in line_stripped:
                        indicator_count += 1
                        break
            
            # Si au moins 20% des lignes ont des indicateurs Ren'Py
            return indicator_count >= max(1, len(lines[:20]) * 0.2)
            
        except Exception:
            return True  # En cas d'erreur, accepter le contenu

    def update_input_mode_button(self):
        """Met √† jour le bouton de mode avec indication de disponibilit√©"""
        try:
            if not self.bouton_input_mode:
                return
            
            if self.input_mode == "drag_drop":
                if DND_AVAILABLE:
                    self.bouton_input_mode.config(text="üéØ D&D", bg='#17a2b8')
                else:
                    # ‚úÖ INDICATION VISUELLE que D&D n'est pas disponible
                    self.bouton_input_mode.config(text="üéØ D&D ‚ùå", bg='#6c757d')
            else:
                self.bouton_input_mode.config(text="üìã Ctrl+V", bg='#6f42c1')
        except Exception as e:
            print(f"‚ö†Ô∏è DEBUG - Erreur bouton: {e}")

    def _setup_drag_drop(self):
        """Configure le support du Drag & Drop - VERSION CORRIG√âE"""
        print("üîß DEBUG - D√©but _setup_drag_drop()")
        
        if not DND_AVAILABLE:
            print("‚ùå DEBUG - tkinterdnd2 non disponible")
            return

        try:
            print("üîç DEBUG - Configuration Drag & Drop...")
            
            # V√©rifier que text_area existe
            if not hasattr(self, 'text_area') or not self.text_area:
                print("‚ùå DEBUG - text_area n'existe pas")
                return
            
            # Enregistrer le drop target
            self.text_area.drop_target_register('DND_Files')
            print("‚úÖ DEBUG - drop_target_register r√©ussi")

            def on_drop(event):
                print(f"üéØ DEBUG - DROP EVENT d√©clench√©!")
                print(f"üîç DEBUG - event.data = '{event.data}'")
                try:
                    files = event.data
                    print(f"üì• DEBUG - Fichiers re√ßus: {files}")
                    
                    # Nettoyer le chemin de fichier
                    if files.startswith('{') and files.endswith('}'):
                        files = files[1:-1]  # Enlever { }
                    
                    # CORRECTION : Ligne corrig√©e
                    file_list = [f.strip() for f in files.split('} {') if f.strip()]
                    if not file_list:
                        file_list = [files.strip()]
                    
                    print(f"üìã DEBUG - Fichiers nettoy√©s: {file_list}")
                    
                    # Traiter le premier fichier .rpy trouv√©
                    for filepath in file_list:
                        cleaned_path = filepath.strip('"').strip("'")
                        print(f"üßπ DEBUG - Test fichier: '{cleaned_path}'")
                        
                        if os.path.exists(cleaned_path) and cleaned_path.lower().endswith('.rpy'):
                            print("‚úÖ DEBUG - Fichier .rpy valide trouv√©!")
                            self._handle_dropped_file(cleaned_path)
                            return 'copy'
                    
                    # Aucun fichier .rpy valide trouv√©
                    print("‚ùå DEBUG - Aucun fichier .rpy valide")
                    messagebox.showwarning(
                        "‚ö†Ô∏è Fichier non support√©",
                        "Veuillez glisser un fichier .rpy valide."
                    )
                        
                except Exception as e:
                    print(f"üí• DEBUG - Erreur dans on_drop: {e}")
                    messagebox.showerror("‚ùå Erreur Drop", f"Erreur lors du traitement:\n{str(e)}")
                
                return 'copy'

            def on_drag_enter(event):
                print("üü¢ DEBUG - DRAG ENTER")
                self.text_area.configure(highlightbackground='#28a745', highlightthickness=3)
                return 'copy'

            def on_drag_leave(event):
                print("üî¥ DEBUG - DRAG LEAVE")
                border_color = '#555555' if config_manager.is_dark_mode_enabled() else '#d0d0d0'
                self.text_area.configure(highlightbackground=border_color, highlightthickness=1)
                return 'copy'

            # Lier les √©v√©nements
            self.text_area.dnd_bind('<<Drop>>', on_drop)
            self.text_area.dnd_bind('<<DragEnter>>', on_drag_enter)
            self.text_area.dnd_bind('<<DragLeave>>', on_drag_leave)
            
            print("‚úÖ DEBUG - Drag & Drop configur√© avec succ√®s")

        except Exception as e:
            print(f"üí• DEBUG - Erreur configuration Drag & Drop: {e}")
            log_message("WARNING", f"Erreur configuration Drag & Drop: {e}")

    def _update_drag_drop_display(self):
        """Met √† jour l'affichage - VERSION AVEC FALLBACK INTELLIGENT"""
        try:
            if not hasattr(self, 'text_area') or not self.text_area:
                return
            
            if not self.file_content or self.file_content == []:
                self.text_mode = "empty"
                
                try:
                    self.text_area.configure(state='normal')
                    self.text_area.delete('1.0', tk.END)
                    
                    # Message unifi√© mode + auto-open + fallback D&D
                    invitation_text = self._get_unified_invitation_text()
                    self.text_area.insert('1.0', invitation_text)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur affichage: {e}")
            else:
                try:
                    self.text_area.configure(state='normal')
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur activation: {e}")
        
        except Exception as e:
            print(f"üí• DEBUG - Erreur _update_drag_drop_display: {e}")

    def _get_unified_invitation_text(self):
        """Message d'invitation unifi√© avec fallback pour Drag & Drop"""
        auto_status = "ON" if config_manager.is_auto_open_enabled() else "OFF"
        
        if self.input_mode == "drag_drop":
            if DND_AVAILABLE:
                return f"""



                            üéØ MODE DRAG & DROP ACTIF
                            
                            Glissez un fichier .rpy ici pour le charger
                            
                            üìÇ Auto-Open: {auto_status}
                            üí° Bouton bleu pour mode Ctrl+V



                """
            else:
                # ‚úÖ FALLBACK AM√âLIOR√â quand D&D non disponible
                return f"""



                            üéØ MODE DRAG & DROP (Non disponible)
                            
                            ‚ö†Ô∏è Votre syst√®me ne supporte pas le Drag & Drop
                            
                            üîÑ Solutions alternatives :
                            ‚Ä¢ Utilisez les boutons üìÇ "Ouvrir Fichier .rpy"
                            ‚Ä¢ Basculez en mode Ctrl+V (bouton D&D bleu ou gris D&D ‚ùå)
                            
                            üìÇ Auto-Open: {auto_status}



                """
        else:  # ctrl_v
            return f"""



                            üìã MODE CTRL+V ACTIF
                            
                            Utilisez Ctrl+V pour coller du contenu Ren'Py
                            ou les boutons ci-dessus
                            
                            üìÇ Auto-Open: {auto_status}
                            üí° Bouton violet pour mode D&D



            """

    def reconstruire_fichier(self):
        """Reconstruit avec validation corrig√©e pour nouvelle structure"""
        if not self.file_content or not self.original_path:
            messagebox.showerror("‚ùå Erreur", MESSAGES["no_file_loaded"])
            return
        
        try:
            # V√©rifier que les fichiers d'extraction existent
            from core.extraction_enhanced import get_file_base_name
            file_base = get_file_base_name(self.original_path)
            
            if not self.extraction_results:
                messagebox.showerror("‚ùå Erreur", "Effectuez d'abord l'extraction du fichier")
                return
            
            # ‚úÖ CORRECTION : Validation avec nouvelle structure
            if config_manager.is_validation_enabled():
                extracted_count = self.extraction_results.get('extracted_count', 0)
                asterix_count = self.extraction_results.get('asterix_count', 0)
                empty_count = self.extraction_results.get('empty_count', 0)
                
                # Construire les chemins avec la nouvelle structure
                from utils.constants import FOLDERS
                
                game_name = extract_game_name(self.original_path)
                temp_root = FOLDERS["temp"]
                translate_folder = os.path.join(temp_root, game_name, "fichiers_a_traduire")
                
                # Chemins des fichiers de traduction
                main_file_path = os.path.join(translate_folder, f"{file_base}.txt")
                asterix_file_path = os.path.join(translate_folder, f"{file_base}_asterix.txt") if asterix_count > 0 else None
                empty_file_path = os.path.join(translate_folder, f"{file_base}_empty.txt") if empty_count > 0 else None
                
                # Validation avec chemins complets
                from core.validation import TranslationValidator
                validator = TranslationValidator()
                validation_result = validator.validate_all_files_with_paths(
                    main_file_path, asterix_file_path, empty_file_path,
                    extracted_count, asterix_count, empty_count
                )
                
                if not validation_result['overall_valid']:
                    errors = []
                    if validation_result['main_file'] and not validation_result['main_file']['valid']:
                        errors.extend(validation_result['main_file'].get('errors', []))
                    
                    error_message = "Validation √©chou√©e:\n\n" + "\n".join(f"‚Ä¢ {error}" for error in errors[:3])
                    if len(errors) > 3:
                        error_message += f"\n... et {len(errors) - 3} autres erreurs"
                    
                    result = messagebox.askyesno("‚ö†Ô∏è Validation √©chou√©e", error_message + "\n\nContinuer quand m√™me ?")
                    if not result:
                        return
            
            # Gestion du mode de sauvegarde
            save_mode = 'new_file'  # Par d√©faut
            
            # Mode fichier classique : demander le choix
            if hasattr(self, 'text_mode') and self.text_mode == "file":
                if not self._save_mode:
                    save_dialog = SaveModeDialog(self.root)
                    self._save_mode = save_dialog.show()
                    
                    if not self._save_mode:
                        return
                save_mode = self._save_mode
            
            # Mode presse-papier : TOUJOURS nouveau fichier
            elif hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                save_mode = 'new_file'
                print("üìã DEBUG - Mode presse-papier: forcer nouveau fichier")
            
            # ‚úÖ CORRECTION : Reconstruction avec nouvelle structure
            self.label_stats.config(text="üîß Reconstruction en cours...")
            self.root.update()
            
            start_time = time.time()
            reconstructor = FileReconstructor()
            reconstructor.load_file_content(self.file_content, self.original_path)
            result = reconstructor.reconstruct_file(save_mode)
            self.last_reconstruction_time = time.time() - start_time
            
            if result:
                # Contr√¥le de coh√©rence si validation activ√©e
                if config_manager.is_validation_enabled():
                    coherence_result = check_file_coherence(result['save_path'])
                    
                    if coherence_result['issues_found'] > 0:
                        response = messagebox.askyesnocancel(
                            "‚ö†Ô∏è Probl√®mes de coh√©rence d√©tect√©s",
                            f"{coherence_result['issues_found']} probl√®me(s) d√©tect√©(s) dans la traduction.\n\n"
                            f"Un fichier d'avertissement a √©t√© cr√©√© dans le dossier 'avertissements/{game_name}'.\n\n"
                            f"‚Ä¢ Oui = Ouvrir le fichier d'avertissement maintenant\n"
                            f"‚Ä¢ Non = Continuer sans ouvrir\n"
                            f"‚Ä¢ Annuler = Voir les d√©tails ici"
                        )
                        
                        if response is True:  # Oui - Ouvrir le fichier
                            try:
                                if coherence_result.get('warning_file'):
                                    FileOpener.open_files([coherence_result['warning_file']], True)
                            except Exception as e:
                                log_message("WARNING", f"Impossible d'ouvrir le fichier d'avertissement", e)
                        
                        elif response is None:  # Annuler - Afficher dans une fen√™tre
                            self._show_coherence_issues(coherence_result['issues'])
                
                # Logger la performance
                if hasattr(self, 'last_extractor') and self.last_extractor:
                    try:
                        from utils.logging import log_performance
                        log_performance(
                            "Traitement complet",
                            os.path.basename(self.original_path),
                            self.last_extraction_time + self.last_reconstruction_time,
                            {
                                "extraction": f"{self.last_extraction_time:.2f}s",
                                "reconstruction": f"{self.last_reconstruction_time:.2f}s",
                                "textes": self.last_extractor.extracted_count,
                                "asterisques": self.last_extractor.asterix_count,
                                "vides": self.last_extractor.empty_count
                            }
                        )
                    except Exception as e:
                        log_message("WARNING", "Impossible de logger la performance", e)
                
                # Messages de succ√®s selon le mode
                success_msg = MESSAGES["reconstruction_success"].format(time=self.last_reconstruction_time)
                self.label_stats.config(text=f"‚úÖ Reconstruction termin√©e | ‚è±Ô∏è {self.last_reconstruction_time:.2f}s")
                
                # Ouvrir le fichier reconstruit si demand√©
                try:
                    FileOpener.open_files([result['save_path']], config_manager.is_auto_open_enabled())
                except:
                    pass
                
                # Messages adapt√©s selon le mode
                if hasattr(self, 'text_mode') and self.text_mode == "clipboard":
                    messagebox.showinfo("üéâ Reconstruction termin√©e", 
                        f"‚úÖ Fichier traduit cr√©√© avec succ√®s !\n\n"
                        f"üìÅ Fichier: {os.path.basename(result['save_path'])}\n"
                        f"üìã Source: Contenu du presse-papier\n"
                        f"‚è±Ô∏è Temps: {self.last_reconstruction_time:.2f}s\n\n"
                        f"üí° Le fichier a √©t√© cr√©√© automatiquement (nouveau fichier)")
                else:
                    # Proposer de passer au fichier suivant en mode dossier
                    if file_manager.is_folder_mode:
                        self.handle_next_file()
                    else:
                        messagebox.showinfo("üéâ Reconstruction termin√©e", 
                            f"‚úÖ Fichier traduit cr√©√© avec succ√®s !\n\n"
                            f"üìÅ Fichier: {os.path.basename(result['save_path'])}\n"
                            f"‚è±Ô∏è Temps: {self.last_reconstruction_time:.2f}s")
            else:
                self.label_stats.config(text="‚ùå Erreur lors de la reconstruction")
                messagebox.showerror("‚ùå Erreur", "Erreur lors de la reconstruction")
                
        except Exception as e:
            log_message("ERREUR", "Erreur lors de la reconstruction", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors de la reconstruction:\n{str(e)}")
            self.label_stats.config(text="‚ùå Erreur lors de la reconstruction")

    def demander_mode_sauvegarde(self):
        """Demande le mode de sauvegarde √† l'utilisateur"""
        # R√©utiliser le mode s'il a d√©j√† √©t√© choisi
        if self._save_mode:
            return self._save_mode
        
        dialog = tk.Toplevel(self.root)
        dialog.title("üíæ Mode de Sauvegarde")
        dialog.geometry("500x300")
        dialog.resizable(False, False)
        dialog.transient(self.root)
        dialog.grab_set()
        
        # Centrer la fen√™tre
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() // 2) - (dialog.winfo_width() // 2)
        y = (dialog.winfo_screenheight() // 2) - (dialog.winfo_height() // 2)
        dialog.geometry(f"+{x}+{y}")
        
        theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
        dialog.configure(bg=theme["bg"])
        
        result = {'mode': None}
        
        # Interface du dialog
        title_frame = tk.Frame(dialog, bg=theme["bg"])
        title_frame.pack(fill='x', padx=20, pady=20)
        
        title_label = tk.Label(title_frame, text="üíæ Choisissez le mode de sauvegarde",
                font=('Segoe UI Emoji', 14, 'bold'), bg=theme["bg"], fg=theme["fg"])
        title_label.pack()
        
        subtitle_label = tk.Label(title_frame, text="Ce choix sera m√©moris√© pour cette session",
                font=('Segoe UI Emoji', 9), bg=theme["bg"], fg=theme["fg"])
        subtitle_label.pack(pady=(5, 0))
        
        # Options
        options_frame = tk.Frame(dialog, bg=theme["bg"])
        options_frame.pack(fill='both', expand=True, padx=20)
        
        def choisir_mode(mode):
            result['mode'] = mode
            self._save_mode = mode
            dialog.destroy()
        
        # Option 1: √âcraser
        option1_frame = tk.Frame(options_frame, bg=theme["frame_bg"], relief='solid', bd=1)
        option1_frame.pack(fill='x', pady=10)
        
        btn_overwrite = tk.Button(option1_frame, text="üîÑ √âcraser le fichier original",
                 font=('Segoe UI Emoji', 11, 'bold'), bg=theme.get("warning", "#ffc107"), fg='#000000',
                 bd=0, pady=15, command=lambda: choisir_mode('overwrite'))
        btn_overwrite.pack(fill='x', padx=10, pady=10)
        
        label_overwrite = tk.Label(option1_frame, text="‚ö†Ô∏è Le fichier original sera remplac√© par la traduction",
                font=('Segoe UI Emoji', 9), bg=theme["frame_bg"], fg=theme["fg"])
        label_overwrite.pack(pady=(0, 10))
        
        # Option 2: Cr√©er nouveau fichier
        option2_frame = tk.Frame(options_frame, bg=theme["frame_bg"], relief='solid', bd=1)
        option2_frame.pack(fill='x', pady=10)
        
        btn_new_file = tk.Button(option2_frame, text="üìù Cr√©er un nouveau fichier",
                 font=('Segoe UI Emoji', 11, 'bold'), bg=theme["accent"], fg='#000000',
                 bd=0, pady=15, command=lambda: choisir_mode('new_file'))
        btn_new_file.pack(fill='x', padx=10, pady=10)
        
        label_new_file = tk.Label(option2_frame, text="‚úÖ Garde l'original et cr√©e un fichier traduit s√©par√©\nüí° L'original sera automatiquement comment√©",
                font=('Segoe UI Emoji', 9), bg=theme["frame_bg"], fg=theme["fg"], justify='left')
        label_new_file.pack(pady=(0, 10))
        
        # Bouton annuler
        btn_cancel = tk.Button(dialog, text="‚ùå Annuler", font=('Segoe UI Emoji', 10),
                 bg=theme.get("danger", "#dc3545"), fg='#000000', bd=0, pady=8,
                 command=dialog.destroy)
        btn_cancel.pack(pady=10)
        
        dialog.wait_window()
        return result['mode']

    def handle_next_file(self):
        """G√®re l'ouverture du fichier suivant en mode dossier"""
        if file_manager.is_folder_mode:
            total_time = self.last_extraction_time + self.last_reconstruction_time
            result = messagebox.askyesno(
                "üìÇ Fichier suivant",
                f"‚úÖ Fichier trait√© avec succ√®s !\n\n‚è±Ô∏è Temps de traitement :\n"
                f"‚Ä¢ Extraction: {self.last_extraction_time:.2f}s\n"
                f"‚Ä¢ Reconstruction: {self.last_reconstruction_time:.2f}s\n"
                f"‚Ä¢ Total: {total_time:.2f}s\n\n"
                f"Voulez-vous ouvrir le fichier suivant du dossier ?"
            )
            if result:
                next_info = file_manager.get_next_file()
                if next_info:
                    self.charger_fichier(next_info['file'])
                    self.update_window_title(next_info['remaining'])
                else:
                    messagebox.showinfo("‚úÖ Information", "Tous les fichiers du dossier ont √©t√© trait√©s.")
                    self.nettoyer_page()
            else:
                self.nettoyer_page()

    def ouvrir_fichier_unique(self):
        """Ouvre un fichier .rpy unique"""
        try:
            filepath = file_manager.open_single_file()
            if filepath:
                # Validation avant ouverture
                validation = validate_before_extraction(filepath)
                if not validation['is_valid']:
                    result = messagebox.askyesno(
                        "‚ö†Ô∏è Fichier suspect",
                        f"Ce fichier ne semble pas √™tre un fichier Ren'Py valide.\n\n"
                        f"Confiance: {validation['confidence']}%\n\n"
                        f"Voulez-vous continuer quand m√™me ?"
                    )
                    if not result:
                        return
                
                # Charger le fichier
                self.charger_fichier(filepath)
                self.update_window_title()
                
        except Exception as e:
            log_message("ERREUR", "Erreur lors de l'ouverture du fichier unique", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le fichier:\n{str(e)}")

    def ouvrir_dossier(self):
        """Ouvre un dossier contenant des fichiers .rpy"""
        try:
            folder_info = file_manager.open_folder()
            if folder_info:
                # Charger le premier fichier
                self.charger_fichier(folder_info['current_file'])
                self.update_window_title(folder_info['total_files'] - 1)
                
        except Exception as e:
            log_message("ERREUR", "Erreur lors de l'ouverture du dossier", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le dossier:\n{str(e)}")

    def charger_fichier(self, filepath):
        """Charge un fichier dans l'interface"""
        try:
            self.file_content = file_manager.load_file_content(filepath)
            self.original_path = filepath
            
            # D√©finir le mode
            self.text_mode = "file"
            self.source_info = {
                'type': 'file',
                'path': filepath,
                'lines': len(self.file_content),
                'size': os.path.getsize(filepath) if os.path.exists(filepath) else 0
            }
            
            self.label_chemin.config(text=f"üìÑ {filepath}")
            
            # R√©activer l'√©dition et charger le contenu
            self.text_area.configure(state='normal')
            self.text_area.delete('1.0', tk.END)
            self.text_area.insert(tk.END, ''.join(self.file_content))
            
            line_count = len(self.file_content)
            self.label_stats.config(text=f"üìä {line_count} lignes charg√©es")
            
            # Mettre √† jour l'affichage
            self._update_drag_drop_display()
            
            log_message("INFO", f"Fichier charg√©: {line_count} lignes")
            
        except Exception as e:
            log_message("ERREUR", f"Impossible de charger le fichier {filepath}", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible de charger le fichier:\n{str(e)}")

    def _handle_dropped_file(self, filepath):
        """G√®re un fichier d√©pos√© par Drag & Drop"""
        try:
            print(f"üìÅ DEBUG - Traitement fichier: '{filepath}'")
            
            # V√©rifications basiques
            if not os.path.exists(filepath):
                messagebox.showerror("‚ùå Fichier introuvable", f"Le fichier n'existe pas:\n{filepath}")
                return
            
            if not filepath.lower().endswith('.rpy'):
                messagebox.showerror("‚ùå Fichier non support√©", f"Seuls les fichiers .rpy sont accept√©s.\n\nFichier: {os.path.basename(filepath)}")
                return
            
            # V√©rifier si du contenu est d√©j√† charg√©
            if self.file_content and self.file_content != []:
                result = messagebox.askyesno(
                    "üßπ Remplacer le contenu",
                    f"Du contenu est d√©j√† charg√©.\n\n"
                    f"Voulez-vous le remplacer par ce fichier :\n{os.path.basename(filepath)} ?"
                )
                if result:
                    self.nettoyer_page()
                else:
                    return
            
            # Charger le fichier
            self.charger_fichier(filepath)
            
            messagebox.showinfo(
                "üéâ Fichier charg√©",
                f"Fichier charg√© avec succ√®s par Drag & Drop !\n\n"
                f"üìÑ {os.path.basename(filepath)}\n"
                f"üìä {len(self.file_content)} lignes"
            )
            
            log_message("INFO", f"Fichier charg√© par Drag & Drop: {anonymize_path(filepath)}")
            
        except Exception as e:
            print(f"üí• DEBUG - Erreur _handle_dropped_file: {str(e)}")
            log_message("ERREUR", f"Erreur traitement fichier D&D: {filepath}", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors du chargement:\n{str(e)}")

    # =============================================================================
    # M√âTHODES UTILITAIRES
    # =============================================================================

    def gerer_sauvegardes(self):
        """Ouvre le gestionnaire de sauvegardes"""
        try:
            show_backup_manager(self.root, self.original_path)
        except Exception as e:
            log_message("ERREUR", "Erreur lors de l'ouverture du gestionnaire de sauvegardes", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le gestionnaire de sauvegardes:\n{str(e)}")

    def afficher_menu_aide(self):
        """Affiche le menu d'aide contextuel"""
        try:
            from ui.tutorial import show_help_menu
            show_help_menu()
            log_message("INFO", "Menu d'aide contextuel ouvert")
        except Exception as e:
            log_message("ERREUR", "Erreur menu d'aide", e)
            self.afficher_tutoriel()

    def afficher_nouveautes(self):
        """Affiche les nouveaut√©s de la version"""
        try:
            from ui.tutorial import show_whats_new
            show_whats_new()
            log_message("INFO", "Nouveaut√©s v2.4.0 affich√©es")
        except Exception as e:
            log_message("ERREUR", "Erreur affichage nouveaut√©s", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'afficher les nouveaut√©s:\n{str(e)}")

    def afficher_tutoriel(self):
        """Affiche le tutoriel complet (m√©thode de compatibilit√©)"""
        try:
            from ui.tutorial import show_tutorial
            show_tutorial()
            log_message("INFO", "Tutoriel complet affich√© (acc√®s direct)")
        except Exception as e:
            log_message("ERREUR", "Erreur affichage tutoriel", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'afficher le tutoriel:\n{str(e)}")

    def toggle_validation(self):
        """Bascule le mode de validation"""
        try:
            new_state = config_manager.toggle_validation()
            
            # Mettre √† jour le bouton
            if self.bouton_validation:
                self.bouton_validation.configure(
                    text=f"‚úÖ Valid : {'ON' if new_state else 'OFF'}"
                )
            
            status = "activ√©e" if new_state else "d√©sactiv√©e"
            log_message("INFO", f"Validation {status}")
            
            # Message informatif
            messagebox.showinfo(
                f"‚úÖ Validation {status}",
                f"Validation {status} avec succ√®s !\n\n"
                f"üí° Impact: {'Contr√¥le de coh√©rence activ√©' if new_state else 'Contr√¥le de coh√©rence d√©sactiv√©'}\n"
                f"üéØ Concerne: Reconstruction et v√©rification des traductions"
            )
            
            return new_state
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur basculement validation: {e}")
            log_message("ERREUR", "Erreur basculement validation", e)

    def handle_toggle_auto_open(self):
        """Callback pour basculer l'option Auto-Ouverture avec feedback am√©lior√©"""
        try:
            new_value = config_manager.toggle_auto_open()
            if self.bouton_auto_open:
                self.bouton_auto_open.config(
                    text=f"üìÇ Auto : {'ON' if new_value else 'OFF'}"
                )
            
            # Message informatif sur l'impact
            status = "activ√©" if new_value else "d√©sactiv√©"
            impact_message = (
                "Les fichiers d'extraction s'ouvriront automatiquement" if new_value 
                else "Les fichiers d'extraction ne s'ouvriront plus automatiquement"
            )
            
            messagebox.showinfo(
                f"üìÇ Auto-Open {status}",
                f"Auto-Open {status} avec succ√®s !\n\n"
                f"üí° Impact: {impact_message}\n"
                f"üéØ Concerne: Drag & Drop, Ctrl+V, et extractions normales"
            )
            
            # Mettre √† jour l'affichage si on est en mode vide
            if hasattr(self, 'text_mode') and self.text_mode == "empty":
                try:
                    self._update_drag_drop_display()
                except Exception as e:
                    print(f"‚ö†Ô∏è DEBUG - Erreur mise √† jour affichage: {e}")
            
            log_message("INFO", f"Auto-Ouverture {'activ√©e' if new_value else 'd√©sactiv√©e'} par l'utilisateur")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors du basculement Auto-Ouverture : {e}")
            log_message("ERREUR", "Erreur basculement Auto-Open", e)

    def ouvrir_dossier_temporaire(self):
        """CORRIG√â : Ouvre le dossier temporaire avec structure compl√®te"""
        try:
            if not self.original_path:
                messagebox.showinfo(
                    "üìÅ Dossier temporaire",
                    "Aucun fichier n'est charg√©.\n\n"
                    "Chargez d'abord un fichier pour acc√©der √† son dossier temporaire."
                )
                return
            
            # Extraire le nom du jeu
            game_name = extract_game_name(self.original_path)
            
            # ‚úÖ CORRECTION : Construire le chemin complet
            from utils.constants import FOLDERS
            temp_base = FOLDERS["temp"]
            game_folder = os.path.join(temp_base, game_name)
            
            # Cr√©er la structure compl√®te si elle n'existe pas
            folders_to_create = [
                game_folder,
                os.path.join(game_folder, "fichiers_a_traduire"),
                os.path.join(game_folder, "fichiers_a_ne_pas_traduire"),
            ]
            
            created_folders = []
            for folder in folders_to_create:
                if not os.path.exists(folder):
                    os.makedirs(folder, exist_ok=True)
                    created_folders.append(os.path.basename(folder))
            
            # Message informatif si des dossiers ont √©t√© cr√©√©s
            if created_folders:
                messagebox.showinfo(
                    "üìÅ Structure cr√©√©e",
                    f"Structure de dossiers cr√©√©e pour '{game_name}':\n\n"
                    f"üìÅ temporaires/{game_name}/\n"
                    f"  ‚îú‚îÄ‚îÄ üìÅ fichiers_a_traduire/\n"
                    f"  ‚îú‚îÄ‚îÄ üìÅ fichiers_a_ne_pas_traduire/\n"
                    f"Le dossier va maintenant s'ouvrir."
                )
            
            # Ouvrir le dossier
            self._open_folder(game_folder)
            
            log_message("INFO", f"Dossier temporaire ouvert/cr√©√© pour {game_name}")
            
        except Exception as e:
            log_message("ERREUR", f"Erreur ouverture dossier temporaire", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le dossier temporaire:\n{str(e)}")

    def ouvrir_avertissements(self):
        """CORRIG√â : Ouvre le dossier avertissements avec structure organis√©e"""
        from utils.constants import FOLDERS
        import glob
        
        try:
            # Structure organis√©e par jeu si un fichier est charg√©
            if self.original_path:
                game_name = extract_game_name(self.original_path)
                warnings_folder = os.path.join(FOLDERS["warnings"], game_name)
                folder_title = f"avertissements/{game_name}"
            else:
                warnings_folder = FOLDERS["warnings"]
                folder_title = "avertissements"
            
            # V√©rifier si le dossier existe et contient des fichiers
            if not os.path.exists(warnings_folder):
                messagebox.showinfo(
                    "üìÅ Dossier avertissements",
                    f"Le dossier '{folder_title}' n'existe pas encore.\n\n"
                    f"Il sera cr√©√© automatiquement lors de la premi√®re validation\n"
                    f"qui d√©tecte des probl√®mes de coh√©rence."
                )
                return
            
            # Chercher les fichiers d'avertissement
            warning_files = glob.glob(os.path.join(warnings_folder, "*_avertissement.txt"))
            
            if not warning_files:
                result = messagebox.askyesno(
                    "üìÅ Aucun avertissement",
                    f"Le dossier '{folder_title}' est vide.\n\n"
                    f"Aucun fichier d'avertissement trouv√©.\n\n"
                    f"Voulez-vous ouvrir le dossier quand m√™me ?"
                )
                if result:
                    self._open_folder(warnings_folder)
                return
            
            # Ouvrir le dossier
            self._open_folder(warnings_folder)
                
        except Exception as e:
            log_message("ERREUR", f"Erreur ouverture dossier avertissements", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'acc√©der aux avertissements:\n{str(e)}")

    def _open_folder(self, folder_path):
        """Ouvre un dossier avec l'explorateur de fichiers"""
        try:
            if os.name == 'nt':  # Windows
                os.startfile(folder_path)
            elif sys.platform == 'darwin':  # macOS
                subprocess.call(['open', folder_path])
            else:  # Linux
                subprocess.call(['xdg-open', folder_path])
        except Exception as e:
            log_message("WARNING", f"Impossible d'ouvrir le dossier {folder_path}", e)
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir le dossier:\n{str(e)}")

    def _show_warning_files_list(self, warning_files, warnings_folder):
        """Affiche la liste des fichiers d'avertissement disponibles"""
        try:
            # Cr√©er une fen√™tre pour la liste
            list_window = tk.Toplevel(self.root)
            list_window.title("üìÑ Fichiers d'avertissement disponibles")
            list_window.geometry("600x400")
            
            # Centrer la fen√™tre
            list_window.update_idletasks()
            x = (list_window.winfo_screenwidth() // 2) - (list_window.winfo_width() // 2)
            y = (list_window.winfo_screenheight() // 2) - (list_window.winfo_height() // 2)
            list_window.geometry(f"+{x}+{y}")
            
            # Appliquer le th√®me
            theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
            list_window.configure(bg=theme["bg"])
            
            # En-t√™te
            header_frame = tk.Frame(list_window, bg=theme["bg"])
            header_frame.pack(fill='x', padx=10, pady=10)
            
            title_label = tk.Label(
                header_frame,
                text=f"üìÑ {len(warning_files)} fichier(s) d'avertissement trouv√©(s)",
                font=('Segoe UI Emoji', 14, 'bold'),
                bg=theme["bg"],
                fg=theme["fg"]
            )
            title_label.pack()
            
            # Liste
            list_frame = tk.Frame(list_window, bg=theme["bg"])
            list_frame.pack(fill='both', expand=True, padx=10, pady=5)
            
            # Listbox avec scrollbar
            listbox_frame = tk.Frame(list_frame, bg=theme["bg"])
            listbox_frame.pack(fill='both', expand=True)
            
            listbox = tk.Listbox(
                listbox_frame,
                font=('Segoe UI Emoji', 10),
                bg=theme["entry_bg"],
                fg=theme["entry_fg"],
                selectbackground=theme.get("select_bg", "#007acc"),
                selectforeground=theme.get("select_fg", "#ffffff")
            )
            
            scrollbar_list = tk.Scrollbar(listbox_frame, orient="vertical", command=listbox.yview)
            listbox.configure(yscrollcommand=scrollbar_list.set)
            
            listbox.pack(side="left", fill="both", expand=True)
            scrollbar_list.pack(side="right", fill="y")
            
            # Remplir la liste
            for warning_file in warning_files:
                file_name = os.path.basename(warning_file)
                # Enlever le suffixe _avertissement.txt pour plus de clart√©
                display_name = file_name.replace("_avertissement.txt", "")
                listbox.insert(tk.END, display_name)
            
            # S√©lectionner le premier par d√©faut
            if warning_files:
                listbox.selection_set(0)
            
            # Boutons
            button_frame = tk.Frame(list_window, bg=theme["bg"])
            button_frame.pack(fill='x', padx=10, pady=10)
            
            def open_selected():
                selection = listbox.curselection()
                if selection:
                    selected_file = warning_files[selection[0]]
                    FileOpener.open_files([selected_file], True)
                    list_window.destroy()
            
            def open_folder():
                self._open_folder(warnings_folder)
                list_window.destroy()
            
            btn_open_file = tk.Button(
                button_frame,
                text="üìÑ Ouvrir le fichier s√©lectionn√©",
                font=('Segoe UI Emoji', 10),
                bg=theme["accent"],
                fg="#000000",
                command=open_selected
            )
            btn_open_file.pack(side='left')
            
            btn_open_folder = tk.Button(
                button_frame,
                text="üìÅ Ouvrir le dossier",
                font=('Segoe UI Emoji', 10),
                command=open_folder
            )
            btn_open_folder.pack(side='left', padx=(10, 0))
            
            btn_close = tk.Button(
                button_frame,
                text="‚ùå Fermer",
                font=('Segoe UI Emoji', 10),
                bg=theme.get("danger", "#dc3545"),
                fg="#000000",
                command=list_window.destroy
            )
            btn_close.pack(side='right')
            
            # Double-clic pour ouvrir
            listbox.bind('<Double-Button-1>', lambda e: open_selected())
            
        except Exception as e:
            log_message("ERREUR", f"Erreur affichage liste avertissements", e)

    def _show_coherence_issues(self, issues):
        """Affiche les probl√®mes de coh√©rence dans une fen√™tre non-bloquante"""
        try:
            # Cr√©er une fen√™tre pour afficher les probl√®mes
            issues_window = tk.Toplevel(self.root)
            issues_window.title("‚ö†Ô∏è Probl√®mes de coh√©rence d√©tect√©s")
            issues_window.geometry("900x700")
            
            # Centrer la fen√™tre
            issues_window.update_idletasks()
            x = (issues_window.winfo_screenwidth() // 2) - (issues_window.winfo_width() // 2)
            y = (issues_window.winfo_screenheight() // 2) - (issues_window.winfo_height() // 2)
            issues_window.geometry(f"+{x}+{y}")
            
            # Appliquer le th√®me
            theme = THEMES["dark"] if config_manager.is_dark_mode_enabled() else THEMES["light"]
            issues_window.configure(bg=theme["bg"])
            
            # En-t√™te
            header_frame = tk.Frame(issues_window, bg=theme["bg"])
            header_frame.pack(fill='x', padx=10, pady=10)
            
            title_label = tk.Label(
                header_frame,
                text="‚ö†Ô∏è Probl√®mes de coh√©rence d√©tect√©s",
                font=('Segoe UI Emoji', 16, 'bold'),
                bg=theme["bg"],
                fg=theme.get("danger", "#dc3545")
            )
            title_label.pack()
            
            count_label = tk.Label(
                header_frame,
                text=f"{len(issues)} probl√®me(s) trouv√©(s) dans la traduction",
                font=('Segoe UI Emoji', 12),
                bg=theme["bg"],
                fg=theme["fg"]
            )
            count_label.pack(pady=(5, 0))
            
            # Zone de texte avec scrollbar
            text_frame = tk.Frame(issues_window, bg=theme["bg"])
            text_frame.pack(fill='both', expand=True, padx=10, pady=5)
            
            text_area = ScrolledText(
                text_frame,
                font=('Courier New', 10),
                wrap=tk.WORD,
                bg=theme["entry_bg"],
                fg=theme["entry_fg"],
                selectbackground=theme.get("select_bg", "#007acc"),
                selectforeground=theme.get("select_fg", "#ffffff")
            )
            text_area.pack(fill='both', expand=True)
            
            # Formater et ins√©rer les probl√®mes
            content = ""
            issues_by_type = {}
            for issue in issues:
                issue_type = issue['type']
                if issue_type not in issues_by_type:
                    issues_by_type[issue_type] = []
                issues_by_type[issue_type].append(issue)
            
            for issue_type, type_issues in issues_by_type.items():
                content += f"üî∏ {self._get_issue_type_name(issue_type)}\n"
                content += "-" * 50 + "\n"
                
                for issue in type_issues:
                    content += f"Ligne {issue['line']}: {issue['description']}\n"
                    if issue.get('old_line'):
                        content += f"  OLD (ligne {issue['old_line']}): {issue.get('old_content', 'N/A')}\n"
                    if issue.get('new_content'):
                        content += f"  NEW: {issue['new_content']}\n"
                    content += "\n"
                
                content += "\n"
            
            text_area.insert('1.0', content)
            text_area.configure(state='disabled')  # Lecture seule
            
            # Boutons
            button_frame = tk.Frame(issues_window, bg=theme["bg"])
            button_frame.pack(fill='x', padx=10, pady=10)
            
            info_label = tk.Label(
                button_frame,
                text="üí° Ces probl√®mes peuvent causer des erreurs dans le jeu",
                font=('Segoe UI Emoji', 9),
                bg=theme["bg"],
                fg=theme["fg"]
            )
            info_label.pack(side='left')
            
            btn_close = tk.Button(
                button_frame,
                text="‚úÖ Compris",
                font=('Segoe UI Emoji', 10),
                bg=theme["accent"],
                fg="#000000",
                command=issues_window.destroy
            )
            btn_close.pack(side='right')
            
        except Exception as e:
            log_message("ERREUR", f"Erreur affichage probl√®mes coh√©rence", e)

    def _get_issue_type_name(self, issue_type):
        """Retourne le nom lisible d'un type de probl√®me"""
        names = {
            'TAG_MISMATCH': 'Balises {} incoh√©rentes',
            'VARIABLE_MISMATCH': 'Variables [] incoh√©rentes', 
            'PLACEHOLDER_MISMATCH': 'Placeholders () incoh√©rents',
            'MALFORMED_PLACEHOLDER': 'Placeholders malform√©s',
            'ORPHAN_TAG': 'Balises orphelines',
            'SPECIAL_CODE_MISMATCH': 'Codes sp√©ciaux incoh√©rents',
            'QUOTE_COUNT_MISMATCH': 'Nombre de guillemets diff√©rent',
            'MISSING_OLD': 'Ligne OLD manquante',
            'FILE_ERROR': 'Erreur de fichier',
            'SYSTEM_ERROR': 'Erreur syst√®me',
            'ANALYSIS_ERROR': 'Erreur d\'analyse'
        }
        return names.get(issue_type, issue_type)

    def reinitialiser(self):
        """CORRIG√â : R√©initialise avec nettoyage de la nouvelle structure"""
        if self.last_extraction_time > 0 or self.last_reconstruction_time > 0:
            total_time = self.last_extraction_time + self.last_reconstruction_time
            result = messagebox.askyesno(
                "üîÑ Confirmer la r√©initialisation",
                f"Voulez-vous vraiment r√©initialiser la base de donn√©es ?\n\n‚è±Ô∏è Temps de la derni√®re session :\n"
                f"‚Ä¢ Extraction: {self.last_extraction_time:.2f}s\n"
                f"‚Ä¢ Reconstruction: {self.last_reconstruction_time:.2f}s\n"
                f"‚Ä¢ Total: {total_time:.2f}s\n\n"
                f"üîÑ Cette action va r√©initialiser :\n"
                f"‚Ä¢ Mode dossier et fichiers ouverts\n"
                f"‚Ä¢ Mode de sauvegarde m√©moris√©\n"
                f"‚Ä¢ Temps d'extraction/reconstruction\n"
                f"‚Ä¢ üóëÔ∏è Nettoyer le dossier temporaire du jeu\n\n"
                f"üìÑ Le fichier actuellement affich√© sera CONSERV√â."
            )
            if not result:
                return
        
        try:
            # ‚úÖ CORRECTION : Nettoyer le dossier temporaire avec nouvelle structure
            if self.original_path:
                from utils.constants import FOLDERS
                
                game_name = extract_game_name(self.original_path)
                temp_base = FOLDERS["temp"]
                game_folder = os.path.join(temp_base, game_name)
                
                if os.path.exists(game_folder):
                    # Nettoyer le contenu du dossier du jeu
                    import shutil
                    try:
                        for item in os.listdir(game_folder):
                            item_path = os.path.join(game_folder, item)
                            if os.path.isfile(item_path):
                                os.remove(item_path)
                            elif os.path.isdir(item_path):
                                shutil.rmtree(item_path)
                        
                        # Recr√©er la structure vide
                        from utils.constants import ensure_game_structure
                        ensure_game_structure(game_name)
                        
                        log_message("INFO", f"Dossier temporaire nettoy√© pour {game_name}")
                    except Exception as e:
                        log_message("WARNING", f"Erreur lors du nettoyage du dossier temporaire", e)
            
            # R√©initialiser SEULEMENT la base de donn√©es
            file_manager.reset()  # Mode dossier, fichiers ouverts, etc.
            
            # R√©initialiser les variables de session
            self._save_mode = None
            self.extraction_results = None
            self.last_extraction_time = 0
            self.last_reconstruction_time = 0
            
            # Remettre le titre par d√©faut (enlever "Mode Dossier")
            self.root.title(WINDOW_CONFIG["title"])
            
            # Remettre les stats √† "Pr√™t" mais garder le chemin du fichier
            self.label_stats.config(text="üìä Pr√™t")
            
            messagebox.showinfo(
                "üîÑ R√©initialisation", 
                "Base de donn√©es nettoy√©e :\n\n"
                "‚úÖ Mode dossier r√©initialis√©\n"
                "‚úÖ Mode de sauvegarde oubli√©\n"
                "‚úÖ Temps de session remis √† z√©ro\n"
                "‚úÖ Dossier temporaire nettoy√©\n\n"
                "üìÑ Le fichier actuel reste charg√©."
            )
            
        except Exception as e:
            log_message("ERREUR", "Erreur lors de la r√©initialisation", e)
            messagebox.showerror("‚ùå Erreur", f"Erreur lors de la r√©initialisation:\n{str(e)}")

    def create_game_structure_on_demand(self, game_name):
        """Cr√©e la structure pour un jeu sp√©cifique √† la demande"""
        try:
            from utils.constants import FOLDERS
            
            # Structure par jeu
            game_structure = [
                # Temporaires
                os.path.join(FOLDERS["temp"], game_name),
                os.path.join(FOLDERS["temp"], game_name, "fichiers_a_traduire"),
                os.path.join(FOLDERS["temp"], game_name, "fichiers_a_ne_pas_traduire"),
                
                # Sauvegardes
                os.path.join(FOLDERS["backup"], game_name),
                
                # Avertissements
                os.path.join(FOLDERS["warnings"], game_name)
            ]
            
            created_folders = []
            for folder in game_structure:
                if not os.path.exists(folder):
                    os.makedirs(folder, exist_ok=True)
                    created_folders.append(folder)
            
            if created_folders:
                print(f"‚úÖ Structure cr√©√©e pour '{game_name}':")
                print(f"üìÅ temporaires/{game_name}/")
                print(f"  ‚îú‚îÄ‚îÄ üìÅ fichiers_a_traduire/")
                print(f"  ‚îú‚îÄ‚îÄ üìÅ fichiers_a_ne_pas_traduire/")
                print(f"üìÅ sauvegardes/{game_name}/")
                print(f"üìÅ avertissements/{game_name}/")
            
            return True
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation structure jeu '{game_name}': {e}")
            return False

    def nettoyer_page(self):
        """Nettoie la page actuelle - VERSION √âTENDUE"""
        if self.last_extraction_time > 0 or self.last_reconstruction_time > 0:
            total_time = self.last_extraction_time + self.last_reconstruction_time
            result = messagebox.askyesno(
                "üßπ Confirmer le nettoyage",
                f"Voulez-vous vraiment nettoyer ?\n\n‚è±Ô∏è Temps de la derni√®re session :\n"
                f"‚Ä¢ Extraction: {self.last_extraction_time:.2f}s\n"
                f"‚Ä¢ Reconstruction: {self.last_reconstruction_time:.2f}s\n"
                f"‚Ä¢ Total: {total_time:.2f}s\n\n"
                f"Ces informations seront perdues."
            )
            if not result:
                return
        
        # Nettoyer les donn√©es
        self.file_content = []
        self.original_path = None
        self.extraction_results = None
        
        # NOUVEAU : R√©initialiser le mode texte
        if hasattr(self, 'text_mode'):
            self.text_mode = "empty"
        if hasattr(self, 'source_info'):
            self.source_info = None
        
        # Nettoyer l'interface
        self.text_area.delete('1.0', tk.END)
        self.label_chemin.config(text="üìÑ Aucun fichier s√©lectionn√©")
        self.label_stats.config(text="üìä Pr√™t")
        
        # Restaurer le message d'invitation Drag & Drop
        try:
            self._update_drag_drop_display()
            log_message("INFO", "Interface nettoy√©e et message Drag & Drop restaur√©")
        except Exception as e:
            log_message("WARNING", f"Erreur restauration message D&D: {e}")
        
        messagebox.showinfo("üßπ Nettoyage", "Page nettoy√©e.")

    def update_window_title(self, remaining_files=None):
        """Met √† jour le titre de la fen√™tre"""
        base_title = WINDOW_CONFIG["title"]
        
        if file_manager.is_folder_mode and remaining_files is not None:
            self.root.title(f"{base_title} - Mode Dossier ({remaining_files} fichiers restants)")
        else:
            self.root.title(base_title)

    def fermer_application(self):
        """Gestion de la fermeture propre de l'application avec confirmation"""
        if not messagebox.askokcancel("Quitter", "Voulez-vous vraiment quitter l'application ?"):
            return  # L'utilisateur a annul√©

        try:
            log_message("INFO", f"=== FERMETURE DU TRADUCTEUR REN'PY PRO v{VERSION} ===")
            
            try:
                TempFileManager.cleanup_temp_files()
            except:
                pass
            
            self.root.destroy()
        except Exception as e:
            print(f"Erreur lors de la fermeture: {e}")
            self.root.destroy()

    def run(self):
        """Lance la boucle principale de l'application"""
        print("üåÄ Lancement de mainloop()")
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            print("üõë Fermeture manuelle (Ctrl+C)")

    def test_compatibility(self):
        """Teste la compatibilit√© D&D + Ctrl+V"""
        print("\nüß™ TEST DE COMPATIBILIT√â")
        print("1. Essayez Drag & Drop d'un fichier .rpy")
        print("2. Puis Ctrl+V avec du contenu dans le presse-papier")
        print("3. Les deux doivent fonctionner sans conflit")
        print("4. V√©rifiez que Ctrl+V fonctionne m√™me avec le message d'invitation\n")

# =============================================================================
# FONCTIONS UTILITAIRES GLOBALES
# =============================================================================

def get_current_game_name():
    """R√©cup√®re le nom du jeu actuellement charg√©"""
    global app_instance
    if app_instance and app_instance.original_path:
        return extract_game_name(app_instance.original_path)
    return "Projet_Inconnu"

def main():
    """Fonction principale"""
    print("üé¨ Lancement de main()")
    app = TraducteurRenPyPro()
    print("‚úÖ Classe instanci√©e")
    app.run()

if __name__ == "__main__":
    try:
        print("üöÄ D√©marrage du Traducteur Ren'Py Pro...")
        main()
    except Exception as e:
        print(f"‚ùå ERREUR au d√©marrage: {e}")
        import traceback
        print("üîç D√©tails complets:")
        traceback.print_exc()
        input("Appuyez sur Entr√©e pour fermer...")