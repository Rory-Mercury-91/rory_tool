# .github/workflows/build-releases.yml
name: Build & Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

env:
  RELEASE_NAME: ${{ github.ref_name }}

jobs:
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Windows Build Env
        run: |
          echo "Préparation de l'environnement Windows..."
          # Ajoutez ici vos étapes de préparation (installation de dépendances, etc.)
          
      - name: Build Windows Binary
        run: |
          echo "Construction du binaire Windows..."
          # Créez le dossier artifacts
          mkdir -p artifacts/windows
          
          # Remplacez cette ligne par votre commande de build réelle
          # Exemple pour Go : go build -o artifacts/windows/myapp.exe ./cmd/myapp
          # Exemple pour Node.js : npm run build:windows
          
          # Exemple factice - remplacez par votre logique
          echo "Windows Binary Content" > artifacts/windows/myapp.exe
          Compress-Archive -Path artifacts/windows/myapp.exe -DestinationPath artifacts/windows/myapp-windows.zip
        shell: pwsh

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ env.RELEASE_NAME }}
          path: artifacts/windows/*.zip

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Linux Build Env
        run: |
          echo "Préparation de l'environnement Linux..."
          # Ajoutez ici vos étapes de préparation (installation de dépendances, etc.)
          
      - name: Build Linux Binary
        run: |
          echo "Construction du binaire Linux..."
          # Créez le dossier artifacts
          mkdir -p artifacts/linux
          
          # Remplacez cette ligne par votre commande de build réelle
          # Exemple pour Go : go build -o artifacts/linux/myapp ./cmd/myapp
          # Exemple pour Node.js : npm run build:linux
          
          # Exemple factice - remplacez par votre logique
          echo "Linux Binary Content" > artifacts/linux/myapp
          tar -czf artifacts/linux/myapp-linux.tar.gz -C artifacts/linux myapp

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ env.RELEASE_NAME }}
          path: artifacts/linux/*.tar.gz

  create-release:
    name: Create GitHub Release
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-${{ env.RELEASE_NAME }}
          path: release/windows

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-${{ env.RELEASE_NAME }}
          path: release/linux

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            release/windows/*.zip
            release/linux/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}